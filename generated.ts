// Generated by @wagmi/cli@1.0.0 on 5/13/2023 at 10:27:38 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AboutTimer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const aboutTimerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'bob_', internalType: 'contract IERC20', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'seller',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'actualHours',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'weiPerHour',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CreatedTask',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'buyer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'seller',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'maxHours',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'weiPerHour',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FinalizedTask',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'bob',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'endTimer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'sellerTask',
    outputs: [
      { name: 'buyer', internalType: 'address', type: 'address' },
      { name: 'seller', internalType: 'address', type: 'address' },
      { name: 'maxHours', internalType: 'uint256', type: 'uint256' },
      { name: 'weiPerHour', internalType: 'uint256', type: 'uint256' },
      { name: 'startTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'buyer', internalType: 'address', type: 'address' },
      { name: 'buyerSignature', internalType: 'bytes', type: 'bytes' },
      { name: 'maxHours', internalType: 'uint256', type: 'uint256' },
      { name: 'weiPerHour', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startTimer',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'maxHours', internalType: 'uint256', type: 'uint256' },
      { name: 'weiPerHour', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'verifySignature',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

/**
 *
 */
export const aboutTimerAddress = {
  31337: '0x9D76393e381FE089950c5bFbDD603f033BfB08c2',
} as const

/**
 *
 */
export const aboutTimerConfig = {
  address: aboutTimerAddress,
  abi: aboutTimerABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

/**
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export const erc20Address = {
  137: '0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B',
  31337: '0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B',
} as const

/**
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export const erc20Config = { address: erc20Address, abi: erc20ABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Mock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20MockABI = [
  {
    stateMutability: 'payable',
    type: 'constructor',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'initialAccount', internalType: 'address', type: 'address' },
      { name: 'initialBalance', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approveInternal',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferInternal',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20WithTokenInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20WithTokenInfoABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IConstantFlowAgreementV1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iConstantFlowAgreementV1ABI = [
  { type: 'error', inputs: [], name: 'CFA_ACL_FLOW_RATE_ALLOWANCE_EXCEEDED' },
  { type: 'error', inputs: [], name: 'CFA_ACL_NO_NEGATIVE_ALLOWANCE' },
  { type: 'error', inputs: [], name: 'CFA_ACL_NO_SENDER_CREATE' },
  { type: 'error', inputs: [], name: 'CFA_ACL_NO_SENDER_FLOW_OPERATOR' },
  { type: 'error', inputs: [], name: 'CFA_ACL_NO_SENDER_UPDATE' },
  { type: 'error', inputs: [], name: 'CFA_ACL_OPERATOR_NO_CREATE_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'CFA_ACL_OPERATOR_NO_DELETE_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'CFA_ACL_OPERATOR_NO_UPDATE_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'CFA_ACL_UNCLEAN_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'CFA_DEPOSIT_TOO_BIG' },
  { type: 'error', inputs: [], name: 'CFA_FLOW_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'CFA_FLOW_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'CFA_FLOW_RATE_TOO_BIG' },
  { type: 'error', inputs: [], name: 'CFA_HOOK_OUT_OF_GAS' },
  { type: 'error', inputs: [], name: 'CFA_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'CFA_INVALID_FLOW_RATE' },
  { type: 'error', inputs: [], name: 'CFA_NON_CRITICAL_SENDER' },
  { type: 'error', inputs: [], name: 'CFA_NO_SELF_FLOW' },
  { type: 'error', inputs: [], name: 'CFA_ZERO_ADDRESS_RECEIVER' },
  { type: 'error', inputs: [], name: 'CFA_ZERO_ADDRESS_SENDER' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'flowOperator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'permissions',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'flowRateAllowance',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
    ],
    name: 'FlowOperatorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'flowRate',
        internalType: 'int96',
        type: 'int96',
        indexed: false,
      },
      {
        name: 'totalSenderFlowRate',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'totalReceiverFlowRate',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'FlowUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'flowOperator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'deposit',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlowUpdatedExtension',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'agreementType',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'authorizeFlowOperatorWithFullControl',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createFlow',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createFlowByOperator',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      {
        name: 'subtractedFlowRateAllowance',
        internalType: 'int96',
        type: 'int96',
      },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'decreaseFlowRateAllowance',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deleteFlow',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deleteFlowByOperator',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getAccountFlowInfo',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
    ],
    name: 'getDepositRequiredForFlowRate',
    outputs: [{ name: 'deposit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
    ],
    name: 'getFlow',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getFlowByID',
    outputs: [
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
    ],
    name: 'getFlowOperatorData',
    outputs: [
      { name: 'flowOperatorId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'permissions', internalType: 'uint8', type: 'uint8' },
      { name: 'flowRateAllowance', internalType: 'int96', type: 'int96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperatorId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getFlowOperatorDataByID',
    outputs: [
      { name: 'permissions', internalType: 'uint8', type: 'uint8' },
      { name: 'flowRateAllowance', internalType: 'int96', type: 'int96' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMaximumFlowRateFromDeposit',
    outputs: [{ name: 'flowRate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getNetFlow',
    outputs: [{ name: 'flowRate', internalType: 'int96', type: 'int96' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      { name: 'addedFlowRateAllowance', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'increaseFlowRateAllowance',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isPatricianPeriod',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'isPatricianPeriodNow',
    outputs: [
      {
        name: 'isCurrentlyPatricianPeriod',
        internalType: 'bool',
        type: 'bool',
      },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'dynamicBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'revokeFlowOperatorWithFullControl',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateFlow',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'flowRate', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateFlowByOperator',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowOperator', internalType: 'address', type: 'address' },
      { name: 'permissions', internalType: 'uint8', type: 'uint8' },
      { name: 'flowRateAllowance', internalType: 'int96', type: 'int96' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateFlowOperatorPermissions',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IConstantInflowNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iConstantInflowNftABI = [
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CALLER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CURRENT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_INVALID_TOKEN_ID' },
  { type: 'error', inputs: [], name: 'CFA_NFT_ONLY_SUPER_TOKEN_FACTORY' },
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_IS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'CIF_NFT_ONLY_CONSTANT_OUTFLOW' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'flowDataByTokenId',
    outputs: [
      {
        name: 'flowData',
        internalType: 'struct IFlowNFTBase.FlowNFTData',
        type: 'tuple',
        components: [
          { name: 'superToken', internalType: 'address', type: 'address' },
          { name: 'flowSender', internalType: 'address', type: 'address' },
          { name: 'flowReceiver', internalType: 'address', type: 'address' },
          { name: 'flowStartDate', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'superToken', internalType: 'address', type: 'address' },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'getTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nftName', internalType: 'string', type: 'string' },
      { name: 'nftSymbol', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'newTokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'triggerMetadataUpdate',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IConstantOutflowNFT
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iConstantOutflowNftABI = [
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CALLER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CURRENT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_INVALID_TOKEN_ID' },
  { type: 'error', inputs: [], name: 'CFA_NFT_ONLY_SUPER_TOKEN_FACTORY' },
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_IS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'COF_NFT_INVALID_SUPER_TOKEN' },
  { type: 'error', inputs: [], name: 'COF_NFT_MINT_TO_AND_FLOW_RECEIVER_SAME' },
  { type: 'error', inputs: [], name: 'COF_NFT_MINT_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'COF_NFT_ONLY_CONSTANT_INFLOW' },
  { type: 'error', inputs: [], name: 'COF_NFT_ONLY_FLOW_AGREEMENTS' },
  { type: 'error', inputs: [], name: 'COF_NFT_TOKEN_ALREADY_EXISTS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'flowDataByTokenId',
    outputs: [
      {
        name: 'flowData',
        internalType: 'struct IFlowNFTBase.FlowNFTData',
        type: 'tuple',
        components: [
          { name: 'superToken', internalType: 'address', type: 'address' },
          { name: 'flowSender', internalType: 'address', type: 'address' },
          { name: 'flowReceiver', internalType: 'address', type: 'address' },
          { name: 'flowStartDate', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'superToken', internalType: 'address', type: 'address' },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'getTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nftName', internalType: 'string', type: 'string' },
      { name: 'nftSymbol', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'onCreate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'onDelete',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'onUpdate',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'triggerMetadataUpdate',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlowNFTBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlowNftBaseABI = [
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_APPROVE_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CALLER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_APPROVE_TO_CURRENT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_INVALID_TOKEN_ID' },
  { type: 'error', inputs: [], name: 'CFA_NFT_ONLY_SUPER_TOKEN_FACTORY' },
  {
    type: 'error',
    inputs: [],
    name: 'CFA_NFT_TRANSFER_CALLER_NOT_OWNER_OR_APPROVED_FOR_ALL',
  },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_FROM_INCORRECT_OWNER' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_IS_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'CFA_NFT_TRANSFER_TO_ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'flowDataByTokenId',
    outputs: [
      {
        name: 'flowData',
        internalType: 'struct IFlowNFTBase.FlowNFTData',
        type: 'tuple',
        components: [
          { name: 'superToken', internalType: 'address', type: 'address' },
          { name: 'flowSender', internalType: 'address', type: 'address' },
          { name: 'flowReceiver', internalType: 'address', type: 'address' },
          { name: 'flowStartDate', internalType: 'uint32', type: 'uint32' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'superToken', internalType: 'address', type: 'address' },
      { name: 'flowSender', internalType: 'address', type: 'address' },
      { name: 'flowReceiver', internalType: 'address', type: 'address' },
    ],
    name: 'getTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'nftName', internalType: 'string', type: 'string' },
      { name: 'nftSymbol', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'triggerMetadataUpdate',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC777
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc777ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Burned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Minted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RevokedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Sent',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'authorizeOperator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultOperators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'granularity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenHolder', internalType: 'address', type: 'address' },
    ],
    name: 'isOperatorFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorSend',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'revokeOperator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'send',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IInstantDistributionAgreementV1
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iInstantDistributionAgreementV1ABI = [
  { type: 'error', inputs: [], name: 'IDA_INDEX_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'IDA_INDEX_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'IDA_INDEX_SHOULD_GROW' },
  { type: 'error', inputs: [], name: 'IDA_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'IDA_OPERATION_NOT_ALLOWED' },
  { type: 'error', inputs: [], name: 'IDA_SUBSCRIPTION_ALREADY_APPROVED' },
  { type: 'error', inputs: [], name: 'IDA_SUBSCRIPTION_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'IDA_SUBSCRIPTION_IS_NOT_APPROVED' },
  { type: 'error', inputs: [], name: 'IDA_ZERO_ADDRESS_SUBSCRIBER' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'IndexCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IndexDistributionClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'IndexSubscribed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'units',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'IndexUnitsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'IndexUnsubscribed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'oldIndexValue',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'newIndexValue',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'totalUnitsPending',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'totalUnitsApproved',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'IndexUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SubscriptionApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SubscriptionDistributionClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SubscriptionRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'subscriber',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'publisher',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'indexId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'units',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'userData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'SubscriptionUnitsUpdated',
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'agreementType',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'approveSubscription',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'calculateDistribution',
    outputs: [
      { name: 'actualAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'newIndexValue', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'subscriber', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'claim',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createIndex',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'subscriber', internalType: 'address', type: 'address' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deleteSubscription',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'distribute',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'getIndex',
    outputs: [
      { name: 'exist', internalType: 'bool', type: 'bool' },
      { name: 'indexValue', internalType: 'uint128', type: 'uint128' },
      { name: 'totalUnitsApproved', internalType: 'uint128', type: 'uint128' },
      { name: 'totalUnitsPending', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'subscriber', internalType: 'address', type: 'address' },
    ],
    name: 'getSubscription',
    outputs: [
      { name: 'exist', internalType: 'bool', type: 'bool' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'units', internalType: 'uint128', type: 'uint128' },
      { name: 'pendingDistribution', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getSubscriptionByID',
    outputs: [
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'units', internalType: 'uint128', type: 'uint128' },
      { name: 'pendingDistribution', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'subscriber', internalType: 'address', type: 'address' },
    ],
    name: 'listSubscriptions',
    outputs: [
      { name: 'publishers', internalType: 'address[]', type: 'address[]' },
      { name: 'indexIds', internalType: 'uint32[]', type: 'uint32[]' },
      { name: 'unitsList', internalType: 'uint128[]', type: 'uint128[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'dynamicBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'publisher', internalType: 'address', type: 'address' },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'revokeSubscription',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'indexValue', internalType: 'uint128', type: 'uint128' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateIndex',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'indexId', internalType: 'uint32', type: 'uint32' },
      { name: 'subscriber', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint128', type: 'uint128' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateSubscription',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperApp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperAppABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementCreated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementTerminated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'cbdata', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'afterAgreementUpdated',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementCreated',
    outputs: [{ name: 'cbdata', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementTerminated',
    outputs: [{ name: 'cbdata', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'agreementId', internalType: 'bytes32', type: 'bytes32' },
      { name: 'agreementData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'beforeAgreementUpdated',
    outputs: [{ name: 'cbdata', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperTokenABI = [
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_BURN_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_MOVE_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_LISTED_AGREEMENT' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_APPROVE_FROM_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_APPROVE_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_BURN_FROM_ZERO_ADDRESS' },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_CALLER_IS_NOT_OPERATOR_FOR_HOLDER',
  },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_INFLATIONARY_DEFLATIONARY_NOT_SUPPORTED',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_MINT_TO_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_NFT_PROXY_ADDRESS_CHANGED' },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_NOT_ERC777_TOKENS_RECIPIENT',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_NO_UNDERLYING_TOKEN' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_ONLY_GOV_OWNER' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_ONLY_SELF' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_TRANSFER_FROM_ZERO_ADDRESS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_TRANSFER_TO_ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bondAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedBy',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmountReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'liquidationTypeData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedV2',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'slotId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementStateUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'AgreementTerminated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AuthorizedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bailoutAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Bailout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Burned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'constantInflowNFT',
        internalType: 'contract IConstantInflowNFT',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ConstantInflowNFTCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'constantOutflowNFT',
        internalType: 'contract IConstantOutflowNFT',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'ConstantOutflowNFTCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Minted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenHolder',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RevokedOperator',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'operatorData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'Sent',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenDowngraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokenUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CONSTANT_INFLOW_NFT',
    outputs: [
      {
        name: '',
        internalType: 'contract IConstantInflowNFT',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CONSTANT_OUTFLOW_NFT',
    outputs: [
      {
        name: '',
        internalType: 'contract IConstantOutflowNFT',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'authorizeOperator',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'createAgreement',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultOperators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'downgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'downgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountActiveAgreements',
    outputs: [
      {
        name: 'activeAgreements',
        internalType: 'contract ISuperAgreement[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementData',
    outputs: [{ name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementStateSlot',
    outputs: [
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getHost',
    outputs: [{ name: 'host', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUnderlyingToken',
    outputs: [{ name: 'tokenAddr', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'granularity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'underlyingToken',
        internalType: 'contract IERC20',
        type: 'address',
      },
      { name: 'underlyingDecimals', internalType: 'uint8', type: 'uint8' },
      { name: 'n', internalType: 'string', type: 'string' },
      { name: 's', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountCritical',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountCriticalNow',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountSolvent',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountSolventNow',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenHolder', internalType: 'address', type: 'address' },
    ],
    name: 'isOperatorFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'liquidationTypeData', internalType: 'bytes', type: 'bytes' },
      { name: 'liquidatorAccount', internalType: 'address', type: 'address' },
      { name: 'useDefaultRewardAccount', internalType: 'bool', type: 'bool' },
      { name: 'targetAccount', internalType: 'address', type: 'address' },
      { name: 'rewardAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'makeLiquidationPayoutsV2',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationApprove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationDecreaseAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationDowngrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationIncreaseAllowance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operationSend',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'operationUpgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operatorData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'operatorSend',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'realtimeBalanceOfNow',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'revokeOperator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfApproveFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfBurn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'selfMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'send',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'delta', internalType: 'int256', type: 'int256' },
    ],
    name: 'settleBalance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateAgreement',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'transferAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementStateSlot',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'upgrade',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperTokenFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperTokenFactoryABI = [
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_FACTORY_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_FACTORY_DOES_NOT_EXIST' },
  {
    type: 'error',
    inputs: [],
    name: 'SUPER_TOKEN_FACTORY_NON_UPGRADEABLE_IS_DEPRECATED',
  },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_FACTORY_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_FACTORY_UNINITIALIZED' },
  { type: 'error', inputs: [], name: 'SUPER_TOKEN_FACTORY_ZERO_ADDRESS' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'CustomSuperTokenCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SuperTokenCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenLogic',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SuperTokenLogicCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_underlyingToken', internalType: 'address', type: 'address' },
    ],
    name: 'computeCanonicalERC20WrapperAddress',
    outputs: [
      { name: 'superTokenAddress', internalType: 'address', type: 'address' },
      { name: 'isDeployed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_underlyingToken',
        internalType: 'contract ERC20WithTokenInfo',
        type: 'address',
      },
    ],
    name: 'createCanonicalERC20Wrapper',
    outputs: [
      { name: '', internalType: 'contract ISuperToken', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'underlyingToken',
        internalType: 'contract ERC20WithTokenInfo',
        type: 'address',
      },
      {
        name: 'upgradability',
        internalType: 'enum ISuperTokenFactory.Upgradability',
        type: 'uint8',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
    name: 'createERC20Wrapper',
    outputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'underlyingToken',
        internalType: 'contract IERC20',
        type: 'address',
      },
      { name: 'underlyingDecimals', internalType: 'uint8', type: 'uint8' },
      {
        name: 'upgradability',
        internalType: 'enum ISuperTokenFactory.Upgradability',
        type: 'uint8',
      },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
    ],
    name: 'createERC20Wrapper',
    outputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: '_underlyingTokenAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'getCanonicalERC20Wrapper',
    outputs: [
      { name: 'superTokenAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getHost',
    outputs: [{ name: 'host', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSuperTokenLogic',
    outputs: [
      {
        name: 'superToken',
        internalType: 'contract ISuperToken',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'customSuperTokenProxy',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'initializeCustomSuperToken',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperfluid
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperfluidABI = [
  {
    type: 'error',
    inputs: [{ name: '_code', internalType: 'uint256', type: 'uint256' }],
    name: 'APP_RULE',
  },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_ALREADY_REGISTERED' },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_CALLBACK_IS_NOT_ACTION' },
  { type: 'error', inputs: [], name: 'HOST_AGREEMENT_IS_NOT_REGISTERED' },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CALL_AGREEMENT_WITH_CTX_FROM_WRONG_ADDRESS',
  },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CALL_APP_ACTION_WITH_CTX_FROM_WRONG_ADDRESS',
  },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_CANNOT_DOWNGRADE_TO_NON_UPGRADEABLE',
  },
  { type: 'error', inputs: [], name: 'HOST_INVALID_CONFIG_WORD' },
  {
    type: 'error',
    inputs: [],
    name: 'HOST_INVALID_OR_EXPIRED_SUPER_APP_REGISTRATION_KEY',
  },
  { type: 'error', inputs: [], name: 'HOST_MAX_256_AGREEMENTS' },
  { type: 'error', inputs: [], name: 'HOST_MUST_BE_CONTRACT' },
  { type: 'error', inputs: [], name: 'HOST_NON_UPGRADEABLE' },
  { type: 'error', inputs: [], name: 'HOST_NON_ZERO_LENGTH_PLACEHOLDER_CTX' },
  { type: 'error', inputs: [], name: 'HOST_NOT_A_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_NO_APP_REGISTRATION_PERMISSIONS' },
  { type: 'error', inputs: [], name: 'HOST_ONLY_GOVERNANCE' },
  { type: 'error', inputs: [], name: 'HOST_ONLY_LISTED_AGREEMENT' },
  { type: 'error', inputs: [], name: 'HOST_RECEIVER_IS_NOT_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_SENDER_IS_NOT_SUPER_APP' },
  { type: 'error', inputs: [], name: 'HOST_SOURCE_APP_NEEDS_HIGHER_APP_LEVEL' },
  { type: 'error', inputs: [], name: 'HOST_SUPER_APP_ALREADY_REGISTERED' },
  { type: 'error', inputs: [], name: 'HOST_SUPER_APP_IS_JAILED' },
  { type: 'error', inputs: [], name: 'HOST_UNAUTHORIZED_SUPER_APP_FACTORY' },
  { type: 'error', inputs: [], name: 'HOST_UNKNOWN_BATCH_CALL_OPERATION_TYPE' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgreementClassRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgreementClassUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'app',
        internalType: 'contract ISuperApp',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AppRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'GovernanceReplaced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'app',
        internalType: 'contract ISuperApp',
        type: 'address',
        indexed: true,
      },
      {
        name: 'reason',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Jail',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newFactory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SuperTokenFactoryUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperToken',
        type: 'address',
        indexed: true,
      },
      {
        name: 'code',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SuperTokenLogicUpdated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'bitmap', internalType: 'uint256', type: 'uint256' },
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'addToAgreementClassesBitmap',
    outputs: [{ name: 'newBitmap', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'targetApp',
        internalType: 'contract ISuperApp',
        type: 'address',
      },
    ],
    name: 'allowCompositeApp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'appCreditUsedDelta', internalType: 'int256', type: 'int256' },
    ],
    name: 'appCallbackPop',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'appCreditGranted', internalType: 'uint256', type: 'uint256' },
      { name: 'appCreditUsed', internalType: 'int256', type: 'int256' },
      {
        name: 'appCreditToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
    ],
    name: 'appCallbackPush',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'operations',
        internalType: 'struct ISuperfluid.Operation[]',
        type: 'tuple[]',
        components: [
          { name: 'operationType', internalType: 'uint32', type: 'uint32' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'batchCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAgreement',
    outputs: [{ name: 'returnedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'userData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAgreementWithContext',
    outputs: [
      { name: 'newCtx', internalType: 'bytes', type: 'bytes' },
      { name: 'returnedData', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppAction',
    outputs: [{ name: 'returnedData', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppActionWithContext',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'isTermination', internalType: 'bool', type: 'bool' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppAfterCallback',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'callData', internalType: 'bytes', type: 'bytes' },
      { name: 'isTermination', internalType: 'bool', type: 'bool' },
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'callAppBeforeCallback',
    outputs: [{ name: 'cbdata', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'appCreditUsedMore', internalType: 'int256', type: 'int256' },
    ],
    name: 'ctxUseCredit',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'ctx', internalType: 'bytes', type: 'bytes' }],
    name: 'decodeCtx',
    outputs: [
      {
        name: 'context',
        internalType: 'struct ISuperfluid.Context',
        type: 'tuple',
        components: [
          { name: 'appCallbackLevel', internalType: 'uint8', type: 'uint8' },
          { name: 'callType', internalType: 'uint8', type: 'uint8' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'msgSender', internalType: 'address', type: 'address' },
          { name: 'agreementSelector', internalType: 'bytes4', type: 'bytes4' },
          { name: 'userData', internalType: 'bytes', type: 'bytes' },
          {
            name: 'appCreditGranted',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'appCreditWantedDeprecated',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'appCreditUsed', internalType: 'int256', type: 'int256' },
          { name: 'appAddress', internalType: 'address', type: 'address' },
          {
            name: 'appCreditToken',
            internalType: 'contract ISuperfluidToken',
            type: 'address',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'operations',
        internalType: 'struct ISuperfluid.Operation[]',
        type: 'tuple[]',
        components: [
          { name: 'operationType', internalType: 'uint32', type: 'uint32' },
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'forwardBatchCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getAgreementClass',
    outputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'getAppCallbackLevel',
    outputs: [
      { name: 'appCallbackLevel', internalType: 'uint8', type: 'uint8' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'getAppManifest',
    outputs: [
      { name: 'isSuperApp', internalType: 'bool', type: 'bool' },
      { name: 'isJailed', internalType: 'bool', type: 'bool' },
      { name: 'noopMask', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGovernance',
    outputs: [
      {
        name: 'governance',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNow',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSuperTokenFactory',
    outputs: [
      {
        name: 'factory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSuperTokenFactoryLogic',
    outputs: [{ name: 'logic', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'isAgreementClassListed',
    outputs: [{ name: 'yes', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isAgreementTypeListed',
    outputs: [{ name: 'yes', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'isApp',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
    ],
    name: 'isAppJailed',
    outputs: [{ name: 'isJail', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      {
        name: 'targetApp',
        internalType: 'contract ISuperApp',
        type: 'address',
      },
    ],
    name: 'isCompositeAppAllowed',
    outputs: [{ name: 'isAppAllowed', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ctx', internalType: 'bytes', type: 'bytes' }],
    name: 'isCtxValid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ctx', internalType: 'bytes', type: 'bytes' },
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'reason', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'jailApp',
    outputs: [{ name: 'newCtx', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'bitmap', internalType: 'uint256', type: 'uint256' }],
    name: 'mapAgreementClasses',
    outputs: [
      {
        name: 'agreementClasses',
        internalType: 'contract ISuperAgreement[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClassLogic',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'registerAgreementClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'configWord', internalType: 'uint256', type: 'uint256' }],
    name: 'registerApp',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'app', internalType: 'contract ISuperApp', type: 'address' },
      { name: 'configWord', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'registerAppByFactory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'configWord', internalType: 'uint256', type: 'uint256' },
      { name: 'registrationKey', internalType: 'string', type: 'string' },
    ],
    name: 'registerAppWithKey',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'bitmap', internalType: 'uint256', type: 'uint256' },
      { name: 'agreementType', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeFromAgreementClassesBitmap',
    outputs: [{ name: 'newBitmap', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newGov',
        internalType: 'contract ISuperfluidGovernance',
        type: 'address',
      },
    ],
    name: 'replaceGovernance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'agreementClassLogic',
        internalType: 'contract ISuperAgreement',
        type: 'address',
      },
    ],
    name: 'updateAgreementClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newFactory',
        internalType: 'contract ISuperTokenFactory',
        type: 'address',
      },
    ],
    name: 'updateSuperTokenFactory',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract ISuperToken', type: 'address' },
    ],
    name: 'updateSuperTokenLogic',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperfluidGovernance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperfluidGovernanceABI = [
  { type: 'error', inputs: [], name: 'SF_GOV_ARRAYS_NOT_SAME_LENGTH' },
  {
    type: 'error',
    inputs: [],
    name: 'SF_GOV_INVALID_LIQUIDATION_OR_PATRICIAN_PERIOD',
  },
  { type: 'error', inputs: [], name: 'SF_GOV_MUST_BE_CONTRACT' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'tokens',
        internalType: 'contract ISuperToken[]',
        type: 'address[]',
      },
    ],
    name: 'batchUpdateSuperTokenLogic',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'clearConfig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getConfigAsAddress',
    outputs: [{ name: 'value', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getConfigAsUint256',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      { name: 'agreementClass', internalType: 'address', type: 'address' },
    ],
    name: 'registerAgreementClass',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      { name: 'newGov', internalType: 'address', type: 'address' },
    ],
    name: 'replaceGovernance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'address', type: 'address' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      {
        name: 'superToken',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'key', internalType: 'bytes32', type: 'bytes32' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setConfig',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'host', internalType: 'contract ISuperfluid', type: 'address' },
      { name: 'hostNewLogic', internalType: 'address', type: 'address' },
      {
        name: 'agreementClassNewLogics',
        internalType: 'address[]',
        type: 'address[]',
      },
      {
        name: 'superTokenFactoryNewLogic',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'updateContracts',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperfluidToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperfluidTokenABI = [
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_ALREADY_EXISTS' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_AGREEMENT_DOES_NOT_EXIST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_BURN_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_MOVE_INSUFFICIENT_BALANCE' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_HOST' },
  { type: 'error', inputs: [], name: 'SF_TOKEN_ONLY_LISTED_AGREEMENT' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'penaltyAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bondAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedBy',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'liquidatorAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'targetAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardAmountReceiver',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rewardAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'liquidationTypeData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'AgreementLiquidatedV2',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'slotId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgreementStateUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'AgreementTerminated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agreementClass',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'data',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
        indexed: false,
      },
    ],
    name: 'AgreementUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'bailoutAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'bailoutAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Bailout',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'createAgreement',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountActiveAgreements',
    outputs: [
      {
        name: 'activeAgreements',
        internalType: 'contract ISuperAgreement[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementData',
    outputs: [{ name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'agreementClass', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAgreementStateSlot',
    outputs: [
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getHost',
    outputs: [{ name: 'host', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountCritical',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountCriticalNow',
    outputs: [{ name: 'isCritical', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isAccountSolvent',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccountSolventNow',
    outputs: [{ name: 'isSolvent', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'liquidationTypeData', internalType: 'bytes', type: 'bytes' },
      { name: 'liquidatorAccount', internalType: 'address', type: 'address' },
      { name: 'useDefaultRewardAccount', internalType: 'bool', type: 'bool' },
      { name: 'targetAccount', internalType: 'address', type: 'address' },
      { name: 'rewardAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: 'targetAccountBalanceDelta',
        internalType: 'int256',
        type: 'int256',
      },
    ],
    name: 'makeLiquidationPayoutsV2',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'realtimeBalanceOfNow',
    outputs: [
      { name: 'availableBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'delta', internalType: 'int256', type: 'int256' },
    ],
    name: 'settleBalance',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'dataLength', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'terminateAgreement',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'bytes32', type: 'bytes32' },
      { name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementData',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'slotId', internalType: 'uint256', type: 'uint256' },
      { name: 'slotData', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'updateAgreementStateSlot',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISuperAgreement
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSuperAgreementABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'agreementType',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'token',
        internalType: 'contract ISuperfluidToken',
        type: 'address',
      },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'time', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'realtimeBalanceOf',
    outputs: [
      { name: 'dynamicBalance', internalType: 'int256', type: 'int256' },
      { name: 'deposit', internalType: 'uint256', type: 'uint256' },
      { name: 'owedDeposit', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TokenInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenInfoABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aboutTimerABI}__.
 *
 *
 */
export function useAboutTimerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof aboutTimerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractRead({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    ...config,
  } as UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"bob"`.
 *
 *
 */
export function useAboutTimerBob<
  TFunctionName extends 'bob',
  TSelectData = ReadContractResult<typeof aboutTimerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractRead({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'bob',
    ...config,
  } as UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"sellerTask"`.
 *
 *
 */
export function useAboutTimerSellerTask<
  TFunctionName extends 'sellerTask',
  TSelectData = ReadContractResult<typeof aboutTimerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractRead({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'sellerTask',
    ...config,
  } as UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"verifySignature"`.
 *
 *
 */
export function useAboutTimerVerifySignature<
  TFunctionName extends 'verifySignature',
  TSelectData = ReadContractResult<typeof aboutTimerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractRead({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'verifySignature',
    ...config,
  } as UseContractReadConfig<typeof aboutTimerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aboutTimerABI}__.
 *
 *
 */
export function useAboutTimerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof aboutTimerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aboutTimerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof aboutTimerABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<typeof aboutTimerABI, TFunctionName, TMode>({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"endTimer"`.
 *
 *
 */
export function useAboutTimerEndTimer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof aboutTimerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aboutTimerABI,
          'endTimer'
        >['request']['abi'],
        'endTimer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'endTimer' }
    : UseContractWriteConfig<typeof aboutTimerABI, 'endTimer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'endTimer'
      } = {} as any,
) {
  return useContractWrite<typeof aboutTimerABI, 'endTimer', TMode>({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'endTimer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"startTimer"`.
 *
 *
 */
export function useAboutTimerStartTimer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof aboutTimerAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof aboutTimerABI,
          'startTimer'
        >['request']['abi'],
        'startTimer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'startTimer' }
    : UseContractWriteConfig<typeof aboutTimerABI, 'startTimer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'startTimer'
      } = {} as any,
) {
  return useContractWrite<typeof aboutTimerABI, 'startTimer', TMode>({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'startTimer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aboutTimerABI}__.
 *
 *
 */
export function usePrepareAboutTimerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aboutTimerABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    ...config,
  } as UsePrepareContractWriteConfig<typeof aboutTimerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"endTimer"`.
 *
 *
 */
export function usePrepareAboutTimerEndTimer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aboutTimerABI, 'endTimer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'endTimer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aboutTimerABI, 'endTimer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link aboutTimerABI}__ and `functionName` set to `"startTimer"`.
 *
 *
 */
export function usePrepareAboutTimerStartTimer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof aboutTimerABI, 'startTimer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    functionName: 'startTimer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof aboutTimerABI, 'startTimer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aboutTimerABI}__.
 *
 *
 */
export function useAboutTimerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof aboutTimerABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractEvent({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    ...config,
  } as UseContractEventConfig<typeof aboutTimerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aboutTimerABI}__ and `eventName` set to `"CreatedTask"`.
 *
 *
 */
export function useAboutTimerCreatedTaskEvent(
  config: Omit<
    UseContractEventConfig<typeof aboutTimerABI, 'CreatedTask'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractEvent({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    eventName: 'CreatedTask',
    ...config,
  } as UseContractEventConfig<typeof aboutTimerABI, 'CreatedTask'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link aboutTimerABI}__ and `eventName` set to `"FinalizedTask"`.
 *
 *
 */
export function useAboutTimerFinalizedTaskEvent(
  config: Omit<
    UseContractEventConfig<typeof aboutTimerABI, 'FinalizedTask'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof aboutTimerAddress } = {} as any,
) {
  return useContractEvent({
    abi: aboutTimerABI,
    address: aboutTimerAddress[31337],
    eventName: 'FinalizedTask',
    ...config,
  } as UseContractEventConfig<typeof aboutTimerABI, 'FinalizedTask'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'increment'
        >['request']['abi'],
        'increment',
        TMode
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'increment', TMode>({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'setNumber'
        >['request']['abi'],
        'setNumber',
        TMode
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Decimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Approve<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20ABI, 'approve', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, 'approve', TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<typeof erc20ABI, 'decreaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, 'decreaseAllowance', TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<typeof erc20ABI, 'increaseAllowance', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, 'increaseAllowance', TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Transfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20ABI, 'transfer', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, 'transfer', TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof erc20Address,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof erc20ABI, 'transferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof erc20ABI, 'transferFrom', TMode>({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Polygon Polygon Scan__](https://polygonscan.com/address/0xB0B195aEFA3650A6908f15CdaC7D92F8a5791B0B)
 * -
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof erc20Address } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: erc20ABI,
    address: erc20Address[chainId as keyof typeof erc20Address],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20MockAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20MockBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20MockDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"name"`.
 */
export function useErc20MockName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20MockSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20MockTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20MockABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20MockABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20MockABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20MockABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, TFunctionName, TMode>({
    abi: erc20MockABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20MockApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20MockABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'approve', TMode>({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approveInternal"`.
 */
export function useErc20MockApproveInternal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'approveInternal'
        >['request']['abi'],
        'approveInternal',
        TMode
      > & { functionName?: 'approveInternal' }
    : UseContractWriteConfig<typeof erc20MockABI, 'approveInternal', TMode> & {
        abi?: never
        functionName?: 'approveInternal'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'approveInternal', TMode>({
    abi: erc20MockABI,
    functionName: 'approveInternal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20MockBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc20MockABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'burn', TMode>({
    abi: erc20MockABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20MockDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20MockABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'decreaseAllowance', TMode>({
    abi: erc20MockABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20MockIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof erc20MockABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'increaseAllowance', TMode>({
    abi: erc20MockABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function useErc20MockMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof erc20MockABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'mint', TMode>({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20MockTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transfer', TMode>({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20MockTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transferFrom', TMode>({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferInternal"`.
 */
export function useErc20MockTransferInternal<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20MockABI,
          'transferInternal'
        >['request']['abi'],
        'transferInternal',
        TMode
      > & { functionName?: 'transferInternal' }
    : UseContractWriteConfig<typeof erc20MockABI, 'transferInternal', TMode> & {
        abi?: never
        functionName?: 'transferInternal'
      } = {} as any,
) {
  return useContractWrite<typeof erc20MockABI, 'transferInternal', TMode>({
    abi: erc20MockABI,
    functionName: 'transferInternal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function usePrepareErc20MockWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20MockApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"approveInternal"`.
 */
export function usePrepareErc20MockApproveInternal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'approveInternal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'approveInternal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'approveInternal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20MockBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20MockDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20MockIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareErc20MockMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20MockTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20MockTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20MockABI}__ and `functionName` set to `"transferInternal"`.
 */
export function usePrepareErc20MockTransferInternal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferInternal'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20MockABI,
    functionName: 'transferInternal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20MockABI, 'transferInternal'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__.
 */
export function useErc20MockEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20MockApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20MockABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20MockTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20MockABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20MockABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20MockABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__.
 */
export function useErc20WithTokenInfoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20WithTokenInfoAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20WithTokenInfoBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20WithTokenInfoDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"name"`.
 */
export function useErc20WithTokenInfoName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20WithTokenInfoSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20WithTokenInfoTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc20WithTokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20WithTokenInfoABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20WithTokenInfoABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__.
 */
export function useErc20WithTokenInfoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20WithTokenInfoABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20WithTokenInfoABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc20WithTokenInfoABI, TFunctionName, TMode>({
    abi: erc20WithTokenInfoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20WithTokenInfoApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20WithTokenInfoABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc20WithTokenInfoABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc20WithTokenInfoABI, 'approve', TMode>({
    abi: erc20WithTokenInfoABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20WithTokenInfoTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20WithTokenInfoABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof erc20WithTokenInfoABI,
        'transfer',
        TMode
      > & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof erc20WithTokenInfoABI, 'transfer', TMode>({
    abi: erc20WithTokenInfoABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20WithTokenInfoTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20WithTokenInfoABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc20WithTokenInfoABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc20WithTokenInfoABI, 'transferFrom', TMode>({
    abi: erc20WithTokenInfoABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__.
 */
export function usePrepareErc20WithTokenInfoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WithTokenInfoABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WithTokenInfoABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20WithTokenInfoApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WithTokenInfoABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20WithTokenInfoTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WithTokenInfoABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20WithTokenInfoTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20WithTokenInfoABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20WithTokenInfoABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc20WithTokenInfoABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WithTokenInfoABI}__.
 */
export function useErc20WithTokenInfoEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20WithTokenInfoABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WithTokenInfoABI,
    ...config,
  } as UseContractEventConfig<typeof erc20WithTokenInfoABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20WithTokenInfoApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20WithTokenInfoABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WithTokenInfoABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20WithTokenInfoABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20WithTokenInfoABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20WithTokenInfoTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20WithTokenInfoABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20WithTokenInfoABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20WithTokenInfoABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__.
 */
export function useIConstantFlowAgreementV1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"agreementType"`.
 */
export function useIConstantFlowAgreementV1AgreementType<
  TFunctionName extends 'agreementType',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'agreementType',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getAccountFlowInfo"`.
 */
export function useIConstantFlowAgreementV1GetAccountFlowInfo<
  TFunctionName extends 'getAccountFlowInfo',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getAccountFlowInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getDepositRequiredForFlowRate"`.
 */
export function useIConstantFlowAgreementV1GetDepositRequiredForFlowRate<
  TFunctionName extends 'getDepositRequiredForFlowRate',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getDepositRequiredForFlowRate',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getFlow"`.
 */
export function useIConstantFlowAgreementV1GetFlow<
  TFunctionName extends 'getFlow',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getFlow',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getFlowByID"`.
 */
export function useIConstantFlowAgreementV1GetFlowById<
  TFunctionName extends 'getFlowByID',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getFlowByID',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getFlowOperatorData"`.
 */
export function useIConstantFlowAgreementV1GetFlowOperatorData<
  TFunctionName extends 'getFlowOperatorData',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getFlowOperatorData',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getFlowOperatorDataByID"`.
 */
export function useIConstantFlowAgreementV1GetFlowOperatorDataById<
  TFunctionName extends 'getFlowOperatorDataByID',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getFlowOperatorDataByID',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getMaximumFlowRateFromDeposit"`.
 */
export function useIConstantFlowAgreementV1GetMaximumFlowRateFromDeposit<
  TFunctionName extends 'getMaximumFlowRateFromDeposit',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getMaximumFlowRateFromDeposit',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"getNetFlow"`.
 */
export function useIConstantFlowAgreementV1GetNetFlow<
  TFunctionName extends 'getNetFlow',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'getNetFlow',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"isPatricianPeriod"`.
 */
export function useIConstantFlowAgreementV1IsPatricianPeriod<
  TFunctionName extends 'isPatricianPeriod',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'isPatricianPeriod',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"isPatricianPeriodNow"`.
 */
export function useIConstantFlowAgreementV1IsPatricianPeriodNow<
  TFunctionName extends 'isPatricianPeriodNow',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'isPatricianPeriodNow',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useIConstantFlowAgreementV1RealtimeBalanceOf<
  TFunctionName extends 'realtimeBalanceOf',
  TSelectData = ReadContractResult<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__.
 */
export function useIConstantFlowAgreementV1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName,
    TMode
  >({ abi: iConstantFlowAgreementV1ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"authorizeFlowOperatorWithFullControl"`.
 */
export function useIConstantFlowAgreementV1AuthorizeFlowOperatorWithFullControl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'authorizeFlowOperatorWithFullControl'
        >['request']['abi'],
        'authorizeFlowOperatorWithFullControl',
        TMode
      > & { functionName?: 'authorizeFlowOperatorWithFullControl' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'authorizeFlowOperatorWithFullControl',
        TMode
      > & {
        abi?: never
        functionName?: 'authorizeFlowOperatorWithFullControl'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'authorizeFlowOperatorWithFullControl',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'authorizeFlowOperatorWithFullControl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"createFlow"`.
 */
export function useIConstantFlowAgreementV1CreateFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'createFlow'
        >['request']['abi'],
        'createFlow',
        TMode
      > & { functionName?: 'createFlow' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'createFlow',
        TMode
      > & {
        abi?: never
        functionName?: 'createFlow'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'createFlow',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'createFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"createFlowByOperator"`.
 */
export function useIConstantFlowAgreementV1CreateFlowByOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'createFlowByOperator'
        >['request']['abi'],
        'createFlowByOperator',
        TMode
      > & { functionName?: 'createFlowByOperator' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'createFlowByOperator',
        TMode
      > & {
        abi?: never
        functionName?: 'createFlowByOperator'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'createFlowByOperator',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'createFlowByOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"decreaseFlowRateAllowance"`.
 */
export function useIConstantFlowAgreementV1DecreaseFlowRateAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'decreaseFlowRateAllowance'
        >['request']['abi'],
        'decreaseFlowRateAllowance',
        TMode
      > & { functionName?: 'decreaseFlowRateAllowance' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'decreaseFlowRateAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseFlowRateAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'decreaseFlowRateAllowance',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'decreaseFlowRateAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"deleteFlow"`.
 */
export function useIConstantFlowAgreementV1DeleteFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'deleteFlow'
        >['request']['abi'],
        'deleteFlow',
        TMode
      > & { functionName?: 'deleteFlow' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'deleteFlow',
        TMode
      > & {
        abi?: never
        functionName?: 'deleteFlow'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'deleteFlow',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'deleteFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"deleteFlowByOperator"`.
 */
export function useIConstantFlowAgreementV1DeleteFlowByOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'deleteFlowByOperator'
        >['request']['abi'],
        'deleteFlowByOperator',
        TMode
      > & { functionName?: 'deleteFlowByOperator' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'deleteFlowByOperator',
        TMode
      > & {
        abi?: never
        functionName?: 'deleteFlowByOperator'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'deleteFlowByOperator',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'deleteFlowByOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"increaseFlowRateAllowance"`.
 */
export function useIConstantFlowAgreementV1IncreaseFlowRateAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'increaseFlowRateAllowance'
        >['request']['abi'],
        'increaseFlowRateAllowance',
        TMode
      > & { functionName?: 'increaseFlowRateAllowance' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'increaseFlowRateAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseFlowRateAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'increaseFlowRateAllowance',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'increaseFlowRateAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"revokeFlowOperatorWithFullControl"`.
 */
export function useIConstantFlowAgreementV1RevokeFlowOperatorWithFullControl<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'revokeFlowOperatorWithFullControl'
        >['request']['abi'],
        'revokeFlowOperatorWithFullControl',
        TMode
      > & { functionName?: 'revokeFlowOperatorWithFullControl' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'revokeFlowOperatorWithFullControl',
        TMode
      > & {
        abi?: never
        functionName?: 'revokeFlowOperatorWithFullControl'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'revokeFlowOperatorWithFullControl',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'revokeFlowOperatorWithFullControl',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlow"`.
 */
export function useIConstantFlowAgreementV1UpdateFlow<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'updateFlow'
        >['request']['abi'],
        'updateFlow',
        TMode
      > & { functionName?: 'updateFlow' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'updateFlow',
        TMode
      > & {
        abi?: never
        functionName?: 'updateFlow'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlow',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlowByOperator"`.
 */
export function useIConstantFlowAgreementV1UpdateFlowByOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'updateFlowByOperator'
        >['request']['abi'],
        'updateFlowByOperator',
        TMode
      > & { functionName?: 'updateFlowByOperator' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'updateFlowByOperator',
        TMode
      > & {
        abi?: never
        functionName?: 'updateFlowByOperator'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlowByOperator',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlowByOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlowOperatorPermissions"`.
 */
export function useIConstantFlowAgreementV1UpdateFlowOperatorPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantFlowAgreementV1ABI,
          'updateFlowOperatorPermissions'
        >['request']['abi'],
        'updateFlowOperatorPermissions',
        TMode
      > & { functionName?: 'updateFlowOperatorPermissions' }
    : UseContractWriteConfig<
        typeof iConstantFlowAgreementV1ABI,
        'updateFlowOperatorPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'updateFlowOperatorPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlowOperatorPermissions',
    TMode
  >({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlowOperatorPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__.
 */
export function usePrepareIConstantFlowAgreementV1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"authorizeFlowOperatorWithFullControl"`.
 */
export function usePrepareIConstantFlowAgreementV1AuthorizeFlowOperatorWithFullControl(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'authorizeFlowOperatorWithFullControl'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'authorizeFlowOperatorWithFullControl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'authorizeFlowOperatorWithFullControl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"createFlow"`.
 */
export function usePrepareIConstantFlowAgreementV1CreateFlow(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'createFlow'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'createFlow',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'createFlow'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"createFlowByOperator"`.
 */
export function usePrepareIConstantFlowAgreementV1CreateFlowByOperator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'createFlowByOperator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'createFlowByOperator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'createFlowByOperator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"decreaseFlowRateAllowance"`.
 */
export function usePrepareIConstantFlowAgreementV1DecreaseFlowRateAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'decreaseFlowRateAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'decreaseFlowRateAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'decreaseFlowRateAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"deleteFlow"`.
 */
export function usePrepareIConstantFlowAgreementV1DeleteFlow(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'deleteFlow'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'deleteFlow',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'deleteFlow'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"deleteFlowByOperator"`.
 */
export function usePrepareIConstantFlowAgreementV1DeleteFlowByOperator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'deleteFlowByOperator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'deleteFlowByOperator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'deleteFlowByOperator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"increaseFlowRateAllowance"`.
 */
export function usePrepareIConstantFlowAgreementV1IncreaseFlowRateAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'increaseFlowRateAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'increaseFlowRateAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'increaseFlowRateAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"revokeFlowOperatorWithFullControl"`.
 */
export function usePrepareIConstantFlowAgreementV1RevokeFlowOperatorWithFullControl(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'revokeFlowOperatorWithFullControl'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'revokeFlowOperatorWithFullControl',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'revokeFlowOperatorWithFullControl'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlow"`.
 */
export function usePrepareIConstantFlowAgreementV1UpdateFlow(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'updateFlow'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlow',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlow'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlowByOperator"`.
 */
export function usePrepareIConstantFlowAgreementV1UpdateFlowByOperator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'updateFlowByOperator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlowByOperator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlowByOperator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `functionName` set to `"updateFlowOperatorPermissions"`.
 */
export function usePrepareIConstantFlowAgreementV1UpdateFlowOperatorPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantFlowAgreementV1ABI,
      'updateFlowOperatorPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantFlowAgreementV1ABI,
    functionName: 'updateFlowOperatorPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantFlowAgreementV1ABI,
    'updateFlowOperatorPermissions'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__.
 */
export function useIConstantFlowAgreementV1Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iConstantFlowAgreementV1ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantFlowAgreementV1ABI,
    ...config,
  } as UseContractEventConfig<typeof iConstantFlowAgreementV1ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `eventName` set to `"FlowOperatorUpdated"`.
 */
export function useIConstantFlowAgreementV1FlowOperatorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iConstantFlowAgreementV1ABI,
      'FlowOperatorUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantFlowAgreementV1ABI,
    eventName: 'FlowOperatorUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iConstantFlowAgreementV1ABI,
    'FlowOperatorUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `eventName` set to `"FlowUpdated"`.
 */
export function useIConstantFlowAgreementV1FlowUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantFlowAgreementV1ABI, 'FlowUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantFlowAgreementV1ABI,
    eventName: 'FlowUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iConstantFlowAgreementV1ABI,
    'FlowUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantFlowAgreementV1ABI}__ and `eventName` set to `"FlowUpdatedExtension"`.
 */
export function useIConstantFlowAgreementV1FlowUpdatedExtensionEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iConstantFlowAgreementV1ABI,
      'FlowUpdatedExtension'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantFlowAgreementV1ABI,
    eventName: 'FlowUpdatedExtension',
    ...config,
  } as UseContractEventConfig<
    typeof iConstantFlowAgreementV1ABI,
    'FlowUpdatedExtension'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__.
 */
export function useIConstantInflowNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIConstantInflowNftBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"flowDataByTokenId"`.
 */
export function useIConstantInflowNftFlowDataByTokenId<
  TFunctionName extends 'flowDataByTokenId',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'flowDataByTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIConstantInflowNftGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"getTokenId"`.
 */
export function useIConstantInflowNftGetTokenId<
  TFunctionName extends 'getTokenId',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'getTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIConstantInflowNftIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"name"`.
 */
export function useIConstantInflowNftName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIConstantInflowNftOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIConstantInflowNftSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useIConstantInflowNftSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIConstantInflowNftTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof iConstantInflowNftABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantInflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantInflowNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantInflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__.
 */
export function useIConstantInflowNftWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, TFunctionName, TMode>({
    abi: iConstantInflowNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"approve"`.
 */
export function useIConstantInflowNftApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof iConstantInflowNftABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, 'approve', TMode>({
    abi: iConstantInflowNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"burn"`.
 */
export function useIConstantInflowNftBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof iConstantInflowNftABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, 'burn', TMode>({
    abi: iConstantInflowNftABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function useIConstantInflowNftInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, 'initialize', TMode>({
    abi: iConstantInflowNftABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"mint"`.
 */
export function useIConstantInflowNftMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof iConstantInflowNftABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, 'mint', TMode>({
    abi: iConstantInflowNftABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIConstantInflowNftSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantInflowNftABI,
    'safeTransferFrom',
    TMode
  >({
    abi: iConstantInflowNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIConstantInflowNftSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantInflowNftABI,
    'setApprovalForAll',
    TMode
  >({
    abi: iConstantInflowNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIConstantInflowNftTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantInflowNftABI, 'transferFrom', TMode>({
    abi: iConstantInflowNftABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function useIConstantInflowNftTriggerMetadataUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantInflowNftABI,
          'triggerMetadataUpdate'
        >['request']['abi'],
        'triggerMetadataUpdate',
        TMode
      > & { functionName?: 'triggerMetadataUpdate' }
    : UseContractWriteConfig<
        typeof iConstantInflowNftABI,
        'triggerMetadataUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'triggerMetadataUpdate'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantInflowNftABI,
    'triggerMetadataUpdate',
    TMode
  >({
    abi: iConstantInflowNftABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__.
 */
export function usePrepareIConstantInflowNftWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIConstantInflowNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIConstantInflowNftBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIConstantInflowNftInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIConstantInflowNftMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIConstantInflowNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantInflowNftABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIConstantInflowNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantInflowNftABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIConstantInflowNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantInflowNftABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function usePrepareIConstantInflowNftTriggerMetadataUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantInflowNftABI,
      'triggerMetadataUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantInflowNftABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantInflowNftABI,
    'triggerMetadataUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantInflowNftABI}__.
 */
export function useIConstantInflowNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iConstantInflowNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantInflowNftABI,
    ...config,
  } as UseContractEventConfig<typeof iConstantInflowNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useIConstantInflowNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantInflowNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantInflowNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iConstantInflowNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIConstantInflowNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantInflowNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantInflowNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iConstantInflowNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useIConstantInflowNftMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantInflowNftABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantInflowNftABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof iConstantInflowNftABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantInflowNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIConstantInflowNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantInflowNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantInflowNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iConstantInflowNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__.
 */
export function useIConstantOutflowNftRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIConstantOutflowNftBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"flowDataByTokenId"`.
 */
export function useIConstantOutflowNftFlowDataByTokenId<
  TFunctionName extends 'flowDataByTokenId',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'flowDataByTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIConstantOutflowNftGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"getTokenId"`.
 */
export function useIConstantOutflowNftGetTokenId<
  TFunctionName extends 'getTokenId',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'getTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIConstantOutflowNftIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"name"`.
 */
export function useIConstantOutflowNftName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIConstantOutflowNftOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIConstantOutflowNftSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"symbol"`.
 */
export function useIConstantOutflowNftSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIConstantOutflowNftTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iConstantOutflowNftABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iConstantOutflowNftABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__.
 */
export function useIConstantOutflowNftWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, TFunctionName, TMode>({
    abi: iConstantOutflowNftABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"approve"`.
 */
export function useIConstantOutflowNftApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'approve', TMode>({
    abi: iConstantOutflowNftABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function useIConstantOutflowNftInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'initialize', TMode>({
    abi: iConstantOutflowNftABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onCreate"`.
 */
export function useIConstantOutflowNftOnCreate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'onCreate'
        >['request']['abi'],
        'onCreate',
        TMode
      > & { functionName?: 'onCreate' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'onCreate',
        TMode
      > & {
        abi?: never
        functionName?: 'onCreate'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'onCreate', TMode>({
    abi: iConstantOutflowNftABI,
    functionName: 'onCreate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onDelete"`.
 */
export function useIConstantOutflowNftOnDelete<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'onDelete'
        >['request']['abi'],
        'onDelete',
        TMode
      > & { functionName?: 'onDelete' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'onDelete',
        TMode
      > & {
        abi?: never
        functionName?: 'onDelete'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'onDelete', TMode>({
    abi: iConstantOutflowNftABI,
    functionName: 'onDelete',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onUpdate"`.
 */
export function useIConstantOutflowNftOnUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'onUpdate'
        >['request']['abi'],
        'onUpdate',
        TMode
      > & { functionName?: 'onUpdate' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'onUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'onUpdate'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'onUpdate', TMode>({
    abi: iConstantOutflowNftABI,
    functionName: 'onUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIConstantOutflowNftSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantOutflowNftABI,
    'safeTransferFrom',
    TMode
  >({
    abi: iConstantOutflowNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIConstantOutflowNftSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantOutflowNftABI,
    'setApprovalForAll',
    TMode
  >({
    abi: iConstantOutflowNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIConstantOutflowNftTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iConstantOutflowNftABI, 'transferFrom', TMode>(
    {
      abi: iConstantOutflowNftABI,
      functionName: 'transferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function useIConstantOutflowNftTriggerMetadataUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iConstantOutflowNftABI,
          'triggerMetadataUpdate'
        >['request']['abi'],
        'triggerMetadataUpdate',
        TMode
      > & { functionName?: 'triggerMetadataUpdate' }
    : UseContractWriteConfig<
        typeof iConstantOutflowNftABI,
        'triggerMetadataUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'triggerMetadataUpdate'
      } = {} as any,
) {
  return useContractWrite<
    typeof iConstantOutflowNftABI,
    'triggerMetadataUpdate',
    TMode
  >({
    abi: iConstantOutflowNftABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__.
 */
export function usePrepareIConstantOutflowNftWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIConstantOutflowNftApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIConstantOutflowNftInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onCreate"`.
 */
export function usePrepareIConstantOutflowNftOnCreate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onCreate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'onCreate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onCreate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onDelete"`.
 */
export function usePrepareIConstantOutflowNftOnDelete(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onDelete'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'onDelete',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onDelete'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"onUpdate"`.
 */
export function usePrepareIConstantOutflowNftOnUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'onUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iConstantOutflowNftABI, 'onUpdate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIConstantOutflowNftSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantOutflowNftABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIConstantOutflowNftSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantOutflowNftABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIConstantOutflowNftTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantOutflowNftABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function usePrepareIConstantOutflowNftTriggerMetadataUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iConstantOutflowNftABI,
      'triggerMetadataUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iConstantOutflowNftABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iConstantOutflowNftABI,
    'triggerMetadataUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantOutflowNftABI}__.
 */
export function useIConstantOutflowNftEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iConstantOutflowNftABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantOutflowNftABI,
    ...config,
  } as UseContractEventConfig<typeof iConstantOutflowNftABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `eventName` set to `"Approval"`.
 */
export function useIConstantOutflowNftApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantOutflowNftABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantOutflowNftABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iConstantOutflowNftABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIConstantOutflowNftApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantOutflowNftABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantOutflowNftABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iConstantOutflowNftABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useIConstantOutflowNftMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantOutflowNftABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantOutflowNftABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof iConstantOutflowNftABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iConstantOutflowNftABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIConstantOutflowNftTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iConstantOutflowNftABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iConstantOutflowNftABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iConstantOutflowNftABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'approve', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20MetadataABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transfer', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, 'transferFrom', TMode>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, TFunctionName, TMode>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'approve', TMode>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'safeTransferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'setApprovalForAll', TMode>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'transferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, TFunctionName, TMode>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'approve', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'safeTransferFrom', TMode>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'transferFrom', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__.
 */
export function useIFlowNftBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIFlowNftBaseBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"flowDataByTokenId"`.
 */
export function useIFlowNftBaseFlowDataByTokenId<
  TFunctionName extends 'flowDataByTokenId',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'flowDataByTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIFlowNftBaseGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"getTokenId"`.
 */
export function useIFlowNftBaseGetTokenId<
  TFunctionName extends 'getTokenId',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'getTokenId',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIFlowNftBaseIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"name"`.
 */
export function useIFlowNftBaseName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIFlowNftBaseOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIFlowNftBaseSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"symbol"`.
 */
export function useIFlowNftBaseSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIFlowNftBaseTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof iFlowNftBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iFlowNftBaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFlowNftBaseABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof iFlowNftBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__.
 */
export function useIFlowNftBaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iFlowNftBaseABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, TFunctionName, TMode>({
    abi: iFlowNftBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"approve"`.
 */
export function useIFlowNftBaseApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof iFlowNftBaseABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, 'approve', TMode>({
    abi: iFlowNftBaseABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"initialize"`.
 */
export function useIFlowNftBaseInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof iFlowNftBaseABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, 'initialize', TMode>({
    abi: iFlowNftBaseABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIFlowNftBaseSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof iFlowNftBaseABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, 'safeTransferFrom', TMode>({
    abi: iFlowNftBaseABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIFlowNftBaseSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof iFlowNftBaseABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, 'setApprovalForAll', TMode>({
    abi: iFlowNftBaseABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIFlowNftBaseTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof iFlowNftBaseABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iFlowNftBaseABI, 'transferFrom', TMode>({
    abi: iFlowNftBaseABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function useIFlowNftBaseTriggerMetadataUpdate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iFlowNftBaseABI,
          'triggerMetadataUpdate'
        >['request']['abi'],
        'triggerMetadataUpdate',
        TMode
      > & { functionName?: 'triggerMetadataUpdate' }
    : UseContractWriteConfig<
        typeof iFlowNftBaseABI,
        'triggerMetadataUpdate',
        TMode
      > & {
        abi?: never
        functionName?: 'triggerMetadataUpdate'
      } = {} as any,
) {
  return useContractWrite<
    typeof iFlowNftBaseABI,
    'triggerMetadataUpdate',
    TMode
  >({
    abi: iFlowNftBaseABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__.
 */
export function usePrepareIFlowNftBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIFlowNftBaseApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIFlowNftBaseInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIFlowNftBaseSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFlowNftBaseABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIFlowNftBaseSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFlowNftBaseABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIFlowNftBaseTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFlowNftBaseABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `functionName` set to `"triggerMetadataUpdate"`.
 */
export function usePrepareIFlowNftBaseTriggerMetadataUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iFlowNftBaseABI,
      'triggerMetadataUpdate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFlowNftBaseABI,
    functionName: 'triggerMetadataUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iFlowNftBaseABI,
    'triggerMetadataUpdate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFlowNftBaseABI}__.
 */
export function useIFlowNftBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iFlowNftBaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFlowNftBaseABI,
    ...config,
  } as UseContractEventConfig<typeof iFlowNftBaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `eventName` set to `"Approval"`.
 */
export function useIFlowNftBaseApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iFlowNftBaseABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFlowNftBaseABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iFlowNftBaseABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIFlowNftBaseApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof iFlowNftBaseABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFlowNftBaseABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof iFlowNftBaseABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useIFlowNftBaseMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof iFlowNftBaseABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFlowNftBaseABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof iFlowNftBaseABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iFlowNftBaseABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIFlowNftBaseTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iFlowNftBaseABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iFlowNftBaseABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iFlowNftBaseABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__.
 */
export function useIerc777Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc777BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"defaultOperators"`.
 */
export function useIerc777DefaultOperators<
  TFunctionName extends 'defaultOperators',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'defaultOperators',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"granularity"`.
 */
export function useIerc777Granularity<
  TFunctionName extends 'granularity',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'granularity',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"isOperatorFor"`.
 */
export function useIerc777IsOperatorFor<
  TFunctionName extends 'isOperatorFor',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'isOperatorFor',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"name"`.
 */
export function useIerc777Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc777Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc777TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc777ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc777ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc777ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__.
 */
export function useIerc777Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc777ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc777ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, TFunctionName, TMode>({
    abi: ierc777ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function useIerc777AuthorizeOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777ABI,
          'authorizeOperator'
        >['request']['abi'],
        'authorizeOperator',
        TMode
      > & { functionName?: 'authorizeOperator' }
    : UseContractWriteConfig<typeof ierc777ABI, 'authorizeOperator', TMode> & {
        abi?: never
        functionName?: 'authorizeOperator'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'authorizeOperator', TMode>({
    abi: ierc777ABI,
    functionName: 'authorizeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"burn"`.
 */
export function useIerc777Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc777ABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof ierc777ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'burn', TMode>({
    abi: ierc777ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function useIerc777OperatorBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777ABI,
          'operatorBurn'
        >['request']['abi'],
        'operatorBurn',
        TMode
      > & { functionName?: 'operatorBurn' }
    : UseContractWriteConfig<typeof ierc777ABI, 'operatorBurn', TMode> & {
        abi?: never
        functionName?: 'operatorBurn'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'operatorBurn', TMode>({
    abi: ierc777ABI,
    functionName: 'operatorBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"operatorSend"`.
 */
export function useIerc777OperatorSend<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777ABI,
          'operatorSend'
        >['request']['abi'],
        'operatorSend',
        TMode
      > & { functionName?: 'operatorSend' }
    : UseContractWriteConfig<typeof ierc777ABI, 'operatorSend', TMode> & {
        abi?: never
        functionName?: 'operatorSend'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'operatorSend', TMode>({
    abi: ierc777ABI,
    functionName: 'operatorSend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function useIerc777RevokeOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc777ABI,
          'revokeOperator'
        >['request']['abi'],
        'revokeOperator',
        TMode
      > & { functionName?: 'revokeOperator' }
    : UseContractWriteConfig<typeof ierc777ABI, 'revokeOperator', TMode> & {
        abi?: never
        functionName?: 'revokeOperator'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'revokeOperator', TMode>({
    abi: ierc777ABI,
    functionName: 'revokeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"send"`.
 */
export function useIerc777Send<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc777ABI, 'send'>['request']['abi'],
        'send',
        TMode
      > & { functionName?: 'send' }
    : UseContractWriteConfig<typeof ierc777ABI, 'send', TMode> & {
        abi?: never
        functionName?: 'send'
      } = {} as any,
) {
  return useContractWrite<typeof ierc777ABI, 'send', TMode>({
    abi: ierc777ABI,
    functionName: 'send',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__.
 */
export function usePrepareIerc777Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function usePrepareIerc777AuthorizeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'authorizeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'authorizeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'authorizeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIerc777Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function usePrepareIerc777OperatorBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'operatorBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'operatorBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'operatorBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"operatorSend"`.
 */
export function usePrepareIerc777OperatorSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'operatorSend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'operatorSend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'operatorSend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function usePrepareIerc777RevokeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'revokeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'revokeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'revokeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc777ABI}__ and `functionName` set to `"send"`.
 */
export function usePrepareIerc777Send(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc777ABI, 'send'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc777ABI,
    functionName: 'send',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc777ABI, 'send'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__.
 */
export function useIerc777Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__ and `eventName` set to `"AuthorizedOperator"`.
 */
export function useIerc777AuthorizedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, 'AuthorizedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    eventName: 'AuthorizedOperator',
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, 'AuthorizedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__ and `eventName` set to `"Burned"`.
 */
export function useIerc777BurnedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, 'Burned'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    eventName: 'Burned',
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, 'Burned'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__ and `eventName` set to `"Minted"`.
 */
export function useIerc777MintedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, 'Minted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    eventName: 'Minted',
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, 'Minted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__ and `eventName` set to `"RevokedOperator"`.
 */
export function useIerc777RevokedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, 'RevokedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    eventName: 'RevokedOperator',
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, 'RevokedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc777ABI}__ and `eventName` set to `"Sent"`.
 */
export function useIerc777SentEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc777ABI, 'Sent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc777ABI,
    eventName: 'Sent',
    ...config,
  } as UseContractEventConfig<typeof ierc777ABI, 'Sent'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__.
 */
export function useIInstantDistributionAgreementV1Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"agreementType"`.
 */
export function useIInstantDistributionAgreementV1AgreementType<
  TFunctionName extends 'agreementType',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'agreementType',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"calculateDistribution"`.
 */
export function useIInstantDistributionAgreementV1CalculateDistribution<
  TFunctionName extends 'calculateDistribution',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'calculateDistribution',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"getIndex"`.
 */
export function useIInstantDistributionAgreementV1GetIndex<
  TFunctionName extends 'getIndex',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'getIndex',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"getSubscription"`.
 */
export function useIInstantDistributionAgreementV1GetSubscription<
  TFunctionName extends 'getSubscription',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'getSubscription',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"getSubscriptionByID"`.
 */
export function useIInstantDistributionAgreementV1GetSubscriptionById<
  TFunctionName extends 'getSubscriptionByID',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'getSubscriptionByID',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"listSubscriptions"`.
 */
export function useIInstantDistributionAgreementV1ListSubscriptions<
  TFunctionName extends 'listSubscriptions',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'listSubscriptions',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useIInstantDistributionAgreementV1RealtimeBalanceOf<
  TFunctionName extends 'realtimeBalanceOf',
  TSelectData = ReadContractResult<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__.
 */
export function useIInstantDistributionAgreementV1Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName,
    TMode
  >({ abi: iInstantDistributionAgreementV1ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"approveSubscription"`.
 */
export function useIInstantDistributionAgreementV1ApproveSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'approveSubscription'
        >['request']['abi'],
        'approveSubscription',
        TMode
      > & { functionName?: 'approveSubscription' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'approveSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'approveSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'approveSubscription',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'approveSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"claim"`.
 */
export function useIInstantDistributionAgreementV1Claim<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'claim'
        >['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'claim',
        TMode
      > & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'claim',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"createIndex"`.
 */
export function useIInstantDistributionAgreementV1CreateIndex<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'createIndex'
        >['request']['abi'],
        'createIndex',
        TMode
      > & { functionName?: 'createIndex' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'createIndex',
        TMode
      > & {
        abi?: never
        functionName?: 'createIndex'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'createIndex',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'createIndex',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"deleteSubscription"`.
 */
export function useIInstantDistributionAgreementV1DeleteSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'deleteSubscription'
        >['request']['abi'],
        'deleteSubscription',
        TMode
      > & { functionName?: 'deleteSubscription' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'deleteSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'deleteSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'deleteSubscription',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'deleteSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"distribute"`.
 */
export function useIInstantDistributionAgreementV1Distribute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'distribute'
        >['request']['abi'],
        'distribute',
        TMode
      > & { functionName?: 'distribute' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'distribute',
        TMode
      > & {
        abi?: never
        functionName?: 'distribute'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'distribute',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'distribute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"revokeSubscription"`.
 */
export function useIInstantDistributionAgreementV1RevokeSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'revokeSubscription'
        >['request']['abi'],
        'revokeSubscription',
        TMode
      > & { functionName?: 'revokeSubscription' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'revokeSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'revokeSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'revokeSubscription',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'revokeSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"updateIndex"`.
 */
export function useIInstantDistributionAgreementV1UpdateIndex<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'updateIndex'
        >['request']['abi'],
        'updateIndex',
        TMode
      > & { functionName?: 'updateIndex' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'updateIndex',
        TMode
      > & {
        abi?: never
        functionName?: 'updateIndex'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'updateIndex',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'updateIndex',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"updateSubscription"`.
 */
export function useIInstantDistributionAgreementV1UpdateSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iInstantDistributionAgreementV1ABI,
          'updateSubscription'
        >['request']['abi'],
        'updateSubscription',
        TMode
      > & { functionName?: 'updateSubscription' }
    : UseContractWriteConfig<
        typeof iInstantDistributionAgreementV1ABI,
        'updateSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'updateSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof iInstantDistributionAgreementV1ABI,
    'updateSubscription',
    TMode
  >({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'updateSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__.
 */
export function usePrepareIInstantDistributionAgreementV1Write<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"approveSubscription"`.
 */
export function usePrepareIInstantDistributionAgreementV1ApproveSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'approveSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'approveSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'approveSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareIInstantDistributionAgreementV1Claim(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'claim'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'claim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"createIndex"`.
 */
export function usePrepareIInstantDistributionAgreementV1CreateIndex(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'createIndex'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'createIndex',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'createIndex'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"deleteSubscription"`.
 */
export function usePrepareIInstantDistributionAgreementV1DeleteSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'deleteSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'deleteSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'deleteSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"distribute"`.
 */
export function usePrepareIInstantDistributionAgreementV1Distribute(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'distribute'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'distribute',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'distribute'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"revokeSubscription"`.
 */
export function usePrepareIInstantDistributionAgreementV1RevokeSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'revokeSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'revokeSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'revokeSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"updateIndex"`.
 */
export function usePrepareIInstantDistributionAgreementV1UpdateIndex(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'updateIndex'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'updateIndex',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'updateIndex'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `functionName` set to `"updateSubscription"`.
 */
export function usePrepareIInstantDistributionAgreementV1UpdateSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'updateSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iInstantDistributionAgreementV1ABI,
    functionName: 'updateSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'updateSubscription'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__.
 */
export function useIInstantDistributionAgreementV1Event<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      TEventName
    >,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexCreated"`.
 */
export function useIInstantDistributionAgreementV1IndexCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexDistributionClaimed"`.
 */
export function useIInstantDistributionAgreementV1IndexDistributionClaimedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexDistributionClaimed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexDistributionClaimed',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexDistributionClaimed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexSubscribed"`.
 */
export function useIInstantDistributionAgreementV1IndexSubscribedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexSubscribed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexSubscribed',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexSubscribed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexUnitsUpdated"`.
 */
export function useIInstantDistributionAgreementV1IndexUnitsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexUnitsUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexUnitsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexUnitsUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexUnsubscribed"`.
 */
export function useIInstantDistributionAgreementV1IndexUnsubscribedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexUnsubscribed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexUnsubscribed',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexUnsubscribed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"IndexUpdated"`.
 */
export function useIInstantDistributionAgreementV1IndexUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'IndexUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'IndexUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'IndexUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"SubscriptionApproved"`.
 */
export function useIInstantDistributionAgreementV1SubscriptionApprovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'SubscriptionApproved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'SubscriptionApproved',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'SubscriptionApproved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"SubscriptionDistributionClaimed"`.
 */
export function useIInstantDistributionAgreementV1SubscriptionDistributionClaimedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'SubscriptionDistributionClaimed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'SubscriptionDistributionClaimed',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'SubscriptionDistributionClaimed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"SubscriptionRevoked"`.
 */
export function useIInstantDistributionAgreementV1SubscriptionRevokedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'SubscriptionRevoked'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'SubscriptionRevoked',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'SubscriptionRevoked'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iInstantDistributionAgreementV1ABI}__ and `eventName` set to `"SubscriptionUnitsUpdated"`.
 */
export function useIInstantDistributionAgreementV1SubscriptionUnitsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iInstantDistributionAgreementV1ABI,
      'SubscriptionUnitsUpdated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iInstantDistributionAgreementV1ABI,
    eventName: 'SubscriptionUnitsUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iInstantDistributionAgreementV1ABI,
    'SubscriptionUnitsUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAppABI}__.
 */
export function useISuperAppRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAppABI,
    ...config,
  } as UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"beforeAgreementCreated"`.
 */
export function useISuperAppBeforeAgreementCreated<
  TFunctionName extends 'beforeAgreementCreated',
  TSelectData = ReadContractResult<typeof iSuperAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAppABI,
    functionName: 'beforeAgreementCreated',
    ...config,
  } as UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"beforeAgreementTerminated"`.
 */
export function useISuperAppBeforeAgreementTerminated<
  TFunctionName extends 'beforeAgreementTerminated',
  TSelectData = ReadContractResult<typeof iSuperAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAppABI,
    functionName: 'beforeAgreementTerminated',
    ...config,
  } as UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"beforeAgreementUpdated"`.
 */
export function useISuperAppBeforeAgreementUpdated<
  TFunctionName extends 'beforeAgreementUpdated',
  TSelectData = ReadContractResult<typeof iSuperAppABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAppABI,
    functionName: 'beforeAgreementUpdated',
    ...config,
  } as UseContractReadConfig<typeof iSuperAppABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperAppABI}__.
 */
export function useISuperAppWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperAppABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSuperAppABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSuperAppABI, TFunctionName, TMode>({
    abi: iSuperAppABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function useISuperAppAfterAgreementCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperAppABI,
          'afterAgreementCreated'
        >['request']['abi'],
        'afterAgreementCreated',
        TMode
      > & { functionName?: 'afterAgreementCreated' }
    : UseContractWriteConfig<
        typeof iSuperAppABI,
        'afterAgreementCreated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementCreated'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperAppABI, 'afterAgreementCreated', TMode>({
    abi: iSuperAppABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function useISuperAppAfterAgreementTerminated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperAppABI,
          'afterAgreementTerminated'
        >['request']['abi'],
        'afterAgreementTerminated',
        TMode
      > & { functionName?: 'afterAgreementTerminated' }
    : UseContractWriteConfig<
        typeof iSuperAppABI,
        'afterAgreementTerminated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementTerminated'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperAppABI,
    'afterAgreementTerminated',
    TMode
  >({
    abi: iSuperAppABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function useISuperAppAfterAgreementUpdated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperAppABI,
          'afterAgreementUpdated'
        >['request']['abi'],
        'afterAgreementUpdated',
        TMode
      > & { functionName?: 'afterAgreementUpdated' }
    : UseContractWriteConfig<
        typeof iSuperAppABI,
        'afterAgreementUpdated',
        TMode
      > & {
        abi?: never
        functionName?: 'afterAgreementUpdated'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperAppABI, 'afterAgreementUpdated', TMode>({
    abi: iSuperAppABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperAppABI}__.
 */
export function usePrepareISuperAppWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperAppABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperAppABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperAppABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementCreated"`.
 */
export function usePrepareISuperAppAfterAgreementCreated(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperAppABI, 'afterAgreementCreated'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperAppABI,
    functionName: 'afterAgreementCreated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperAppABI,
    'afterAgreementCreated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementTerminated"`.
 */
export function usePrepareISuperAppAfterAgreementTerminated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperAppABI,
      'afterAgreementTerminated'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperAppABI,
    functionName: 'afterAgreementTerminated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperAppABI,
    'afterAgreementTerminated'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperAppABI}__ and `functionName` set to `"afterAgreementUpdated"`.
 */
export function usePrepareISuperAppAfterAgreementUpdated(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperAppABI, 'afterAgreementUpdated'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperAppABI,
    functionName: 'afterAgreementUpdated',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperAppABI,
    'afterAgreementUpdated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__.
 */
export function useISuperTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"CONSTANT_INFLOW_NFT"`.
 */
export function useISuperTokenConstantInflowNft<
  TFunctionName extends 'CONSTANT_INFLOW_NFT',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'CONSTANT_INFLOW_NFT',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"CONSTANT_OUTFLOW_NFT"`.
 */
export function useISuperTokenConstantOutflowNft<
  TFunctionName extends 'CONSTANT_OUTFLOW_NFT',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'CONSTANT_OUTFLOW_NFT',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useISuperTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useISuperTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useISuperTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"defaultOperators"`.
 */
export function useISuperTokenDefaultOperators<
  TFunctionName extends 'defaultOperators',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'defaultOperators',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"getAccountActiveAgreements"`.
 */
export function useISuperTokenGetAccountActiveAgreements<
  TFunctionName extends 'getAccountActiveAgreements',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'getAccountActiveAgreements',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"getAgreementData"`.
 */
export function useISuperTokenGetAgreementData<
  TFunctionName extends 'getAgreementData',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'getAgreementData',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"getAgreementStateSlot"`.
 */
export function useISuperTokenGetAgreementStateSlot<
  TFunctionName extends 'getAgreementStateSlot',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'getAgreementStateSlot',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"getHost"`.
 */
export function useISuperTokenGetHost<
  TFunctionName extends 'getHost',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'getHost',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"getUnderlyingToken"`.
 */
export function useISuperTokenGetUnderlyingToken<
  TFunctionName extends 'getUnderlyingToken',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'getUnderlyingToken',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"granularity"`.
 */
export function useISuperTokenGranularity<
  TFunctionName extends 'granularity',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'granularity',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"isAccountCritical"`.
 */
export function useISuperTokenIsAccountCritical<
  TFunctionName extends 'isAccountCritical',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'isAccountCritical',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"isAccountCriticalNow"`.
 */
export function useISuperTokenIsAccountCriticalNow<
  TFunctionName extends 'isAccountCriticalNow',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'isAccountCriticalNow',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"isAccountSolvent"`.
 */
export function useISuperTokenIsAccountSolvent<
  TFunctionName extends 'isAccountSolvent',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'isAccountSolvent',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"isAccountSolventNow"`.
 */
export function useISuperTokenIsAccountSolventNow<
  TFunctionName extends 'isAccountSolventNow',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'isAccountSolventNow',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"isOperatorFor"`.
 */
export function useISuperTokenIsOperatorFor<
  TFunctionName extends 'isOperatorFor',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'isOperatorFor',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"name"`.
 */
export function useISuperTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useISuperTokenRealtimeBalanceOf<
  TFunctionName extends 'realtimeBalanceOf',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"realtimeBalanceOfNow"`.
 */
export function useISuperTokenRealtimeBalanceOfNow<
  TFunctionName extends 'realtimeBalanceOfNow',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'realtimeBalanceOfNow',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useISuperTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useISuperTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof iSuperTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iSuperTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__.
 */
export function useISuperTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSuperTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, TFunctionName, TMode>({
    abi: iSuperTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useISuperTokenApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'approve', TMode>({
    abi: iSuperTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function useISuperTokenAuthorizeOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'authorizeOperator'
        >['request']['abi'],
        'authorizeOperator',
        TMode
      > & { functionName?: 'authorizeOperator' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'authorizeOperator',
        TMode
      > & {
        abi?: never
        functionName?: 'authorizeOperator'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'authorizeOperator', TMode>({
    abi: iSuperTokenABI,
    functionName: 'authorizeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useISuperTokenBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'burn', TMode>({
    abi: iSuperTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function useISuperTokenCreateAgreement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'createAgreement'
        >['request']['abi'],
        'createAgreement',
        TMode
      > & { functionName?: 'createAgreement' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'createAgreement',
        TMode
      > & {
        abi?: never
        functionName?: 'createAgreement'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'createAgreement', TMode>({
    abi: iSuperTokenABI,
    functionName: 'createAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useISuperTokenDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'decreaseAllowance', TMode>({
    abi: iSuperTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"downgrade"`.
 */
export function useISuperTokenDowngrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'downgrade'
        >['request']['abi'],
        'downgrade',
        TMode
      > & { functionName?: 'downgrade' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'downgrade', TMode> & {
        abi?: never
        functionName?: 'downgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'downgrade', TMode>({
    abi: iSuperTokenABI,
    functionName: 'downgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"downgradeTo"`.
 */
export function useISuperTokenDowngradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'downgradeTo'
        >['request']['abi'],
        'downgradeTo',
        TMode
      > & { functionName?: 'downgradeTo' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'downgradeTo', TMode> & {
        abi?: never
        functionName?: 'downgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'downgradeTo', TMode>({
    abi: iSuperTokenABI,
    functionName: 'downgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useISuperTokenIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'increaseAllowance', TMode>({
    abi: iSuperTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useISuperTokenInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'initialize', TMode>({
    abi: iSuperTokenABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function useISuperTokenMakeLiquidationPayoutsV2<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'makeLiquidationPayoutsV2'
        >['request']['abi'],
        'makeLiquidationPayoutsV2',
        TMode
      > & { functionName?: 'makeLiquidationPayoutsV2' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'makeLiquidationPayoutsV2',
        TMode
      > & {
        abi?: never
        functionName?: 'makeLiquidationPayoutsV2'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenABI,
    'makeLiquidationPayoutsV2',
    TMode
  >({
    abi: iSuperTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationApprove"`.
 */
export function useISuperTokenOperationApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationApprove'
        >['request']['abi'],
        'operationApprove',
        TMode
      > & { functionName?: 'operationApprove' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationApprove',
        TMode
      > & {
        abi?: never
        functionName?: 'operationApprove'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operationApprove', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operationApprove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationDecreaseAllowance"`.
 */
export function useISuperTokenOperationDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationDecreaseAllowance'
        >['request']['abi'],
        'operationDecreaseAllowance',
        TMode
      > & { functionName?: 'operationDecreaseAllowance' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationDecreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'operationDecreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenABI,
    'operationDecreaseAllowance',
    TMode
  >({
    abi: iSuperTokenABI,
    functionName: 'operationDecreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationDowngrade"`.
 */
export function useISuperTokenOperationDowngrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationDowngrade'
        >['request']['abi'],
        'operationDowngrade',
        TMode
      > & { functionName?: 'operationDowngrade' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationDowngrade',
        TMode
      > & {
        abi?: never
        functionName?: 'operationDowngrade'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operationDowngrade', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operationDowngrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationIncreaseAllowance"`.
 */
export function useISuperTokenOperationIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationIncreaseAllowance'
        >['request']['abi'],
        'operationIncreaseAllowance',
        TMode
      > & { functionName?: 'operationIncreaseAllowance' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationIncreaseAllowance',
        TMode
      > & {
        abi?: never
        functionName?: 'operationIncreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenABI,
    'operationIncreaseAllowance',
    TMode
  >({
    abi: iSuperTokenABI,
    functionName: 'operationIncreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationSend"`.
 */
export function useISuperTokenOperationSend<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationSend'
        >['request']['abi'],
        'operationSend',
        TMode
      > & { functionName?: 'operationSend' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'operationSend', TMode> & {
        abi?: never
        functionName?: 'operationSend'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operationSend', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operationSend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationTransferFrom"`.
 */
export function useISuperTokenOperationTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationTransferFrom'
        >['request']['abi'],
        'operationTransferFrom',
        TMode
      > & { functionName?: 'operationTransferFrom' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'operationTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenABI,
    'operationTransferFrom',
    TMode
  >({
    abi: iSuperTokenABI,
    functionName: 'operationTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationUpgrade"`.
 */
export function useISuperTokenOperationUpgrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operationUpgrade'
        >['request']['abi'],
        'operationUpgrade',
        TMode
      > & { functionName?: 'operationUpgrade' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'operationUpgrade',
        TMode
      > & {
        abi?: never
        functionName?: 'operationUpgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operationUpgrade', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operationUpgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function useISuperTokenOperatorBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operatorBurn'
        >['request']['abi'],
        'operatorBurn',
        TMode
      > & { functionName?: 'operatorBurn' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'operatorBurn', TMode> & {
        abi?: never
        functionName?: 'operatorBurn'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operatorBurn', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operatorBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operatorSend"`.
 */
export function useISuperTokenOperatorSend<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'operatorSend'
        >['request']['abi'],
        'operatorSend',
        TMode
      > & { functionName?: 'operatorSend' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'operatorSend', TMode> & {
        abi?: never
        functionName?: 'operatorSend'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'operatorSend', TMode>({
    abi: iSuperTokenABI,
    functionName: 'operatorSend',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function useISuperTokenRevokeOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'revokeOperator'
        >['request']['abi'],
        'revokeOperator',
        TMode
      > & { functionName?: 'revokeOperator' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'revokeOperator', TMode> & {
        abi?: never
        functionName?: 'revokeOperator'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'revokeOperator', TMode>({
    abi: iSuperTokenABI,
    functionName: 'revokeOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfApproveFor"`.
 */
export function useISuperTokenSelfApproveFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'selfApproveFor'
        >['request']['abi'],
        'selfApproveFor',
        TMode
      > & { functionName?: 'selfApproveFor' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'selfApproveFor', TMode> & {
        abi?: never
        functionName?: 'selfApproveFor'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'selfApproveFor', TMode>({
    abi: iSuperTokenABI,
    functionName: 'selfApproveFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfBurn"`.
 */
export function useISuperTokenSelfBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'selfBurn'
        >['request']['abi'],
        'selfBurn',
        TMode
      > & { functionName?: 'selfBurn' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'selfBurn', TMode> & {
        abi?: never
        functionName?: 'selfBurn'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'selfBurn', TMode>({
    abi: iSuperTokenABI,
    functionName: 'selfBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfMint"`.
 */
export function useISuperTokenSelfMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'selfMint'
        >['request']['abi'],
        'selfMint',
        TMode
      > & { functionName?: 'selfMint' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'selfMint', TMode> & {
        abi?: never
        functionName?: 'selfMint'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'selfMint', TMode>({
    abi: iSuperTokenABI,
    functionName: 'selfMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfTransferFrom"`.
 */
export function useISuperTokenSelfTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'selfTransferFrom'
        >['request']['abi'],
        'selfTransferFrom',
        TMode
      > & { functionName?: 'selfTransferFrom' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'selfTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'selfTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'selfTransferFrom', TMode>({
    abi: iSuperTokenABI,
    functionName: 'selfTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"send"`.
 */
export function useISuperTokenSend<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'send'
        >['request']['abi'],
        'send',
        TMode
      > & { functionName?: 'send' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'send', TMode> & {
        abi?: never
        functionName?: 'send'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'send', TMode>({
    abi: iSuperTokenABI,
    functionName: 'send',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function useISuperTokenSettleBalance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'settleBalance'
        >['request']['abi'],
        'settleBalance',
        TMode
      > & { functionName?: 'settleBalance' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'settleBalance', TMode> & {
        abi?: never
        functionName?: 'settleBalance'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'settleBalance', TMode>({
    abi: iSuperTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function useISuperTokenTerminateAgreement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'terminateAgreement'
        >['request']['abi'],
        'terminateAgreement',
        TMode
      > & { functionName?: 'terminateAgreement' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'terminateAgreement',
        TMode
      > & {
        abi?: never
        functionName?: 'terminateAgreement'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'terminateAgreement', TMode>({
    abi: iSuperTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useISuperTokenTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'transfer', TMode>({
    abi: iSuperTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transferAll"`.
 */
export function useISuperTokenTransferAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'transferAll'
        >['request']['abi'],
        'transferAll',
        TMode
      > & { functionName?: 'transferAll' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'transferAll', TMode> & {
        abi?: never
        functionName?: 'transferAll'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'transferAll', TMode>({
    abi: iSuperTokenABI,
    functionName: 'transferAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useISuperTokenTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'transferFrom', TMode>({
    abi: iSuperTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function useISuperTokenUpdateAgreementData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'updateAgreementData'
        >['request']['abi'],
        'updateAgreementData',
        TMode
      > & { functionName?: 'updateAgreementData' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'updateAgreementData',
        TMode
      > & {
        abi?: never
        functionName?: 'updateAgreementData'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'updateAgreementData', TMode>({
    abi: iSuperTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function useISuperTokenUpdateAgreementStateSlot<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'updateAgreementStateSlot'
        >['request']['abi'],
        'updateAgreementStateSlot',
        TMode
      > & { functionName?: 'updateAgreementStateSlot' }
    : UseContractWriteConfig<
        typeof iSuperTokenABI,
        'updateAgreementStateSlot',
        TMode
      > & {
        abi?: never
        functionName?: 'updateAgreementStateSlot'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenABI,
    'updateAgreementStateSlot',
    TMode
  >({
    abi: iSuperTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"upgrade"`.
 */
export function useISuperTokenUpgrade<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'upgrade'
        >['request']['abi'],
        'upgrade',
        TMode
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'upgrade', TMode> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'upgrade', TMode>({
    abi: iSuperTokenABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useISuperTokenUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof iSuperTokenABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenABI, 'upgradeTo', TMode>({
    abi: iSuperTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__.
 */
export function usePrepareISuperTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareISuperTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"authorizeOperator"`.
 */
export function usePrepareISuperTokenAuthorizeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'authorizeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'authorizeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'authorizeOperator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareISuperTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function usePrepareISuperTokenCreateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'createAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'createAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'createAgreement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareISuperTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"downgrade"`.
 */
export function usePrepareISuperTokenDowngrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'downgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'downgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'downgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"downgradeTo"`.
 */
export function usePrepareISuperTokenDowngradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'downgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'downgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'downgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareISuperTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareISuperTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function usePrepareISuperTokenMakeLiquidationPayoutsV2(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenABI,
      'makeLiquidationPayoutsV2'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'makeLiquidationPayoutsV2'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationApprove"`.
 */
export function usePrepareISuperTokenOperationApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationApprove'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationApprove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationApprove'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationDecreaseAllowance"`.
 */
export function usePrepareISuperTokenOperationDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenABI,
      'operationDecreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationDecreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'operationDecreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationDowngrade"`.
 */
export function usePrepareISuperTokenOperationDowngrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationDowngrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationDowngrade',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'operationDowngrade'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationIncreaseAllowance"`.
 */
export function usePrepareISuperTokenOperationIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenABI,
      'operationIncreaseAllowance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationIncreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'operationIncreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationSend"`.
 */
export function usePrepareISuperTokenOperationSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationSend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationSend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationSend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationTransferFrom"`.
 */
export function usePrepareISuperTokenOperationTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenABI,
      'operationTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'operationTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operationUpgrade"`.
 */
export function usePrepareISuperTokenOperationUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationUpgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operationUpgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operationUpgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operatorBurn"`.
 */
export function usePrepareISuperTokenOperatorBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operatorBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operatorBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operatorBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"operatorSend"`.
 */
export function usePrepareISuperTokenOperatorSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operatorSend'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'operatorSend',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'operatorSend'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"revokeOperator"`.
 */
export function usePrepareISuperTokenRevokeOperator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'revokeOperator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'revokeOperator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'revokeOperator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfApproveFor"`.
 */
export function usePrepareISuperTokenSelfApproveFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfApproveFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'selfApproveFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfApproveFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfBurn"`.
 */
export function usePrepareISuperTokenSelfBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'selfBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfBurn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfMint"`.
 */
export function usePrepareISuperTokenSelfMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'selfMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"selfTransferFrom"`.
 */
export function usePrepareISuperTokenSelfTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'selfTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'selfTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"send"`.
 */
export function usePrepareISuperTokenSend(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'send'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'send',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'send'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function usePrepareISuperTokenSettleBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'settleBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'settleBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function usePrepareISuperTokenTerminateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'terminateAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'terminateAgreement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareISuperTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transferAll"`.
 */
export function usePrepareISuperTokenTransferAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transferAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'transferAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transferAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareISuperTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function usePrepareISuperTokenUpdateAgreementData(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'updateAgreementData'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'updateAgreementData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function usePrepareISuperTokenUpdateAgreementStateSlot(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenABI,
      'updateAgreementStateSlot'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenABI,
    'updateAgreementStateSlot'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareISuperTokenUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'upgrade'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareISuperTokenUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperTokenABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__.
 */
export function useISuperTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementCreated"`.
 */
export function useISuperTokenAgreementCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementCreated',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementLiquidated"`.
 */
export function useISuperTokenAgreementLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementLiquidated',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementLiquidatedBy"`.
 */
export function useISuperTokenAgreementLiquidatedByEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidatedBy'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementLiquidatedBy',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidatedBy'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementLiquidatedV2"`.
 */
export function useISuperTokenAgreementLiquidatedV2Event(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidatedV2'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementLiquidatedV2',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementLiquidatedV2'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementStateUpdated"`.
 */
export function useISuperTokenAgreementStateUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementStateUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementStateUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementStateUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementTerminated"`.
 */
export function useISuperTokenAgreementTerminatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementTerminated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementTerminated',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementTerminated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AgreementUpdated"`.
 */
export function useISuperTokenAgreementUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AgreementUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AgreementUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AgreementUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useISuperTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"AuthorizedOperator"`.
 */
export function useISuperTokenAuthorizedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'AuthorizedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'AuthorizedOperator',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'AuthorizedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Bailout"`.
 */
export function useISuperTokenBailoutEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Bailout'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Bailout',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Bailout'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Burned"`.
 */
export function useISuperTokenBurnedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Burned'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Burned',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Burned'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"ConstantInflowNFTCreated"`.
 */
export function useISuperTokenConstantInflowNftCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'ConstantInflowNFTCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'ConstantInflowNFTCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperTokenABI,
    'ConstantInflowNFTCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"ConstantOutflowNFTCreated"`.
 */
export function useISuperTokenConstantOutflowNftCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'ConstantOutflowNFTCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'ConstantOutflowNFTCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperTokenABI,
    'ConstantOutflowNFTCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Minted"`.
 */
export function useISuperTokenMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Minted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Minted',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Minted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"RevokedOperator"`.
 */
export function useISuperTokenRevokedOperatorEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'RevokedOperator'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'RevokedOperator',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'RevokedOperator'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Sent"`.
 */
export function useISuperTokenSentEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Sent'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Sent',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Sent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"TokenDowngraded"`.
 */
export function useISuperTokenTokenDowngradedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'TokenDowngraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'TokenDowngraded',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'TokenDowngraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"TokenUpgraded"`.
 */
export function useISuperTokenTokenUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'TokenUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'TokenUpgraded',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'TokenUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useISuperTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenFactoryABI}__.
 */
export function useISuperTokenFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperTokenFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperTokenFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"computeCanonicalERC20WrapperAddress"`.
 */
export function useISuperTokenFactoryComputeCanonicalErc20WrapperAddress<
  TFunctionName extends 'computeCanonicalERC20WrapperAddress',
  TSelectData = ReadContractResult<typeof iSuperTokenFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperTokenFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenFactoryABI,
    functionName: 'computeCanonicalERC20WrapperAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"getCanonicalERC20Wrapper"`.
 */
export function useISuperTokenFactoryGetCanonicalErc20Wrapper<
  TFunctionName extends 'getCanonicalERC20Wrapper',
  TSelectData = ReadContractResult<typeof iSuperTokenFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperTokenFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenFactoryABI,
    functionName: 'getCanonicalERC20Wrapper',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"getHost"`.
 */
export function useISuperTokenFactoryGetHost<
  TFunctionName extends 'getHost',
  TSelectData = ReadContractResult<typeof iSuperTokenFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperTokenFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenFactoryABI,
    functionName: 'getHost',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"getSuperTokenLogic"`.
 */
export function useISuperTokenFactoryGetSuperTokenLogic<
  TFunctionName extends 'getSuperTokenLogic',
  TSelectData = ReadContractResult<typeof iSuperTokenFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperTokenFactoryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperTokenFactoryABI,
    functionName: 'getSuperTokenLogic',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__.
 */
export function useISuperTokenFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenFactoryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSuperTokenFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenFactoryABI, TFunctionName, TMode>({
    abi: iSuperTokenFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"createCanonicalERC20Wrapper"`.
 */
export function useISuperTokenFactoryCreateCanonicalErc20Wrapper<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenFactoryABI,
          'createCanonicalERC20Wrapper'
        >['request']['abi'],
        'createCanonicalERC20Wrapper',
        TMode
      > & { functionName?: 'createCanonicalERC20Wrapper' }
    : UseContractWriteConfig<
        typeof iSuperTokenFactoryABI,
        'createCanonicalERC20Wrapper',
        TMode
      > & {
        abi?: never
        functionName?: 'createCanonicalERC20Wrapper'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenFactoryABI,
    'createCanonicalERC20Wrapper',
    TMode
  >({
    abi: iSuperTokenFactoryABI,
    functionName: 'createCanonicalERC20Wrapper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"createERC20Wrapper"`.
 */
export function useISuperTokenFactoryCreateErc20Wrapper<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenFactoryABI,
          'createERC20Wrapper'
        >['request']['abi'],
        'createERC20Wrapper',
        TMode
      > & { functionName?: 'createERC20Wrapper' }
    : UseContractWriteConfig<
        typeof iSuperTokenFactoryABI,
        'createERC20Wrapper',
        TMode
      > & {
        abi?: never
        functionName?: 'createERC20Wrapper'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenFactoryABI,
    'createERC20Wrapper',
    TMode
  >({
    abi: iSuperTokenFactoryABI,
    functionName: 'createERC20Wrapper',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function useISuperTokenFactoryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenFactoryABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof iSuperTokenFactoryABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperTokenFactoryABI, 'initialize', TMode>({
    abi: iSuperTokenFactoryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"initializeCustomSuperToken"`.
 */
export function useISuperTokenFactoryInitializeCustomSuperToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperTokenFactoryABI,
          'initializeCustomSuperToken'
        >['request']['abi'],
        'initializeCustomSuperToken',
        TMode
      > & { functionName?: 'initializeCustomSuperToken' }
    : UseContractWriteConfig<
        typeof iSuperTokenFactoryABI,
        'initializeCustomSuperToken',
        TMode
      > & {
        abi?: never
        functionName?: 'initializeCustomSuperToken'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperTokenFactoryABI,
    'initializeCustomSuperToken',
    TMode
  >({
    abi: iSuperTokenFactoryABI,
    functionName: 'initializeCustomSuperToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__.
 */
export function usePrepareISuperTokenFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"createCanonicalERC20Wrapper"`.
 */
export function usePrepareISuperTokenFactoryCreateCanonicalErc20Wrapper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenFactoryABI,
      'createCanonicalERC20Wrapper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenFactoryABI,
    functionName: 'createCanonicalERC20Wrapper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenFactoryABI,
    'createCanonicalERC20Wrapper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"createERC20Wrapper"`.
 */
export function usePrepareISuperTokenFactoryCreateErc20Wrapper(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenFactoryABI,
      'createERC20Wrapper'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenFactoryABI,
    functionName: 'createERC20Wrapper',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenFactoryABI,
    'createERC20Wrapper'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareISuperTokenFactoryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperTokenFactoryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenFactoryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenFactoryABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `functionName` set to `"initializeCustomSuperToken"`.
 */
export function usePrepareISuperTokenFactoryInitializeCustomSuperToken(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperTokenFactoryABI,
      'initializeCustomSuperToken'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperTokenFactoryABI,
    functionName: 'initializeCustomSuperToken',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperTokenFactoryABI,
    'initializeCustomSuperToken'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenFactoryABI}__.
 */
export function useISuperTokenFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenFactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof iSuperTokenFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `eventName` set to `"CustomSuperTokenCreated"`.
 */
export function useISuperTokenFactoryCustomSuperTokenCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iSuperTokenFactoryABI,
      'CustomSuperTokenCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenFactoryABI,
    eventName: 'CustomSuperTokenCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperTokenFactoryABI,
    'CustomSuperTokenCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `eventName` set to `"SuperTokenCreated"`.
 */
export function useISuperTokenFactorySuperTokenCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperTokenFactoryABI, 'SuperTokenCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenFactoryABI,
    eventName: 'SuperTokenCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperTokenFactoryABI,
    'SuperTokenCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperTokenFactoryABI}__ and `eventName` set to `"SuperTokenLogicCreated"`.
 */
export function useISuperTokenFactorySuperTokenLogicCreatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iSuperTokenFactoryABI,
      'SuperTokenLogicCreated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperTokenFactoryABI,
    eventName: 'SuperTokenLogicCreated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperTokenFactoryABI,
    'SuperTokenLogicCreated'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__.
 */
export function useISuperfluidRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"addToAgreementClassesBitmap"`.
 */
export function useISuperfluidAddToAgreementClassesBitmap<
  TFunctionName extends 'addToAgreementClassesBitmap',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'addToAgreementClassesBitmap',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"decodeCtx"`.
 */
export function useISuperfluidDecodeCtx<
  TFunctionName extends 'decodeCtx',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'decodeCtx',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getAgreementClass"`.
 */
export function useISuperfluidGetAgreementClass<
  TFunctionName extends 'getAgreementClass',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getAgreementClass',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getAppCallbackLevel"`.
 */
export function useISuperfluidGetAppCallbackLevel<
  TFunctionName extends 'getAppCallbackLevel',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getAppCallbackLevel',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getAppManifest"`.
 */
export function useISuperfluidGetAppManifest<
  TFunctionName extends 'getAppManifest',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getAppManifest',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getGovernance"`.
 */
export function useISuperfluidGetGovernance<
  TFunctionName extends 'getGovernance',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getGovernance',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getNow"`.
 */
export function useISuperfluidGetNow<
  TFunctionName extends 'getNow',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getNow',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getSuperTokenFactory"`.
 */
export function useISuperfluidGetSuperTokenFactory<
  TFunctionName extends 'getSuperTokenFactory',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getSuperTokenFactory',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"getSuperTokenFactoryLogic"`.
 */
export function useISuperfluidGetSuperTokenFactoryLogic<
  TFunctionName extends 'getSuperTokenFactoryLogic',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'getSuperTokenFactoryLogic',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isAgreementClassListed"`.
 */
export function useISuperfluidIsAgreementClassListed<
  TFunctionName extends 'isAgreementClassListed',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isAgreementClassListed',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isAgreementTypeListed"`.
 */
export function useISuperfluidIsAgreementTypeListed<
  TFunctionName extends 'isAgreementTypeListed',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isAgreementTypeListed',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isApp"`.
 */
export function useISuperfluidIsApp<
  TFunctionName extends 'isApp',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isApp',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isAppJailed"`.
 */
export function useISuperfluidIsAppJailed<
  TFunctionName extends 'isAppJailed',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isAppJailed',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isCompositeAppAllowed"`.
 */
export function useISuperfluidIsCompositeAppAllowed<
  TFunctionName extends 'isCompositeAppAllowed',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isCompositeAppAllowed',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"isCtxValid"`.
 */
export function useISuperfluidIsCtxValid<
  TFunctionName extends 'isCtxValid',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'isCtxValid',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"mapAgreementClasses"`.
 */
export function useISuperfluidMapAgreementClasses<
  TFunctionName extends 'mapAgreementClasses',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'mapAgreementClasses',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"removeFromAgreementClassesBitmap"`.
 */
export function useISuperfluidRemoveFromAgreementClassesBitmap<
  TFunctionName extends 'removeFromAgreementClassesBitmap',
  TSelectData = ReadContractResult<typeof iSuperfluidABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidABI,
    functionName: 'removeFromAgreementClassesBitmap',
    ...config,
  } as UseContractReadConfig<typeof iSuperfluidABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__.
 */
export function useISuperfluidWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSuperfluidABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, TFunctionName, TMode>({
    abi: iSuperfluidABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"allowCompositeApp"`.
 */
export function useISuperfluidAllowCompositeApp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'allowCompositeApp'
        >['request']['abi'],
        'allowCompositeApp',
        TMode
      > & { functionName?: 'allowCompositeApp' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'allowCompositeApp',
        TMode
      > & {
        abi?: never
        functionName?: 'allowCompositeApp'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'allowCompositeApp', TMode>({
    abi: iSuperfluidABI,
    functionName: 'allowCompositeApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"appCallbackPop"`.
 */
export function useISuperfluidAppCallbackPop<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'appCallbackPop'
        >['request']['abi'],
        'appCallbackPop',
        TMode
      > & { functionName?: 'appCallbackPop' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'appCallbackPop', TMode> & {
        abi?: never
        functionName?: 'appCallbackPop'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'appCallbackPop', TMode>({
    abi: iSuperfluidABI,
    functionName: 'appCallbackPop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"appCallbackPush"`.
 */
export function useISuperfluidAppCallbackPush<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'appCallbackPush'
        >['request']['abi'],
        'appCallbackPush',
        TMode
      > & { functionName?: 'appCallbackPush' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'appCallbackPush',
        TMode
      > & {
        abi?: never
        functionName?: 'appCallbackPush'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'appCallbackPush', TMode>({
    abi: iSuperfluidABI,
    functionName: 'appCallbackPush',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"batchCall"`.
 */
export function useISuperfluidBatchCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'batchCall'
        >['request']['abi'],
        'batchCall',
        TMode
      > & { functionName?: 'batchCall' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'batchCall', TMode> & {
        abi?: never
        functionName?: 'batchCall'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'batchCall', TMode>({
    abi: iSuperfluidABI,
    functionName: 'batchCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAgreement"`.
 */
export function useISuperfluidCallAgreement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAgreement'
        >['request']['abi'],
        'callAgreement',
        TMode
      > & { functionName?: 'callAgreement' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'callAgreement', TMode> & {
        abi?: never
        functionName?: 'callAgreement'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'callAgreement', TMode>({
    abi: iSuperfluidABI,
    functionName: 'callAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAgreementWithContext"`.
 */
export function useISuperfluidCallAgreementWithContext<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAgreementWithContext'
        >['request']['abi'],
        'callAgreementWithContext',
        TMode
      > & { functionName?: 'callAgreementWithContext' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'callAgreementWithContext',
        TMode
      > & {
        abi?: never
        functionName?: 'callAgreementWithContext'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'callAgreementWithContext',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'callAgreementWithContext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppAction"`.
 */
export function useISuperfluidCallAppAction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAppAction'
        >['request']['abi'],
        'callAppAction',
        TMode
      > & { functionName?: 'callAppAction' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'callAppAction', TMode> & {
        abi?: never
        functionName?: 'callAppAction'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'callAppAction', TMode>({
    abi: iSuperfluidABI,
    functionName: 'callAppAction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppActionWithContext"`.
 */
export function useISuperfluidCallAppActionWithContext<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAppActionWithContext'
        >['request']['abi'],
        'callAppActionWithContext',
        TMode
      > & { functionName?: 'callAppActionWithContext' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'callAppActionWithContext',
        TMode
      > & {
        abi?: never
        functionName?: 'callAppActionWithContext'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'callAppActionWithContext',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'callAppActionWithContext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppAfterCallback"`.
 */
export function useISuperfluidCallAppAfterCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAppAfterCallback'
        >['request']['abi'],
        'callAppAfterCallback',
        TMode
      > & { functionName?: 'callAppAfterCallback' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'callAppAfterCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'callAppAfterCallback'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'callAppAfterCallback', TMode>(
    {
      abi: iSuperfluidABI,
      functionName: 'callAppAfterCallback',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppBeforeCallback"`.
 */
export function useISuperfluidCallAppBeforeCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'callAppBeforeCallback'
        >['request']['abi'],
        'callAppBeforeCallback',
        TMode
      > & { functionName?: 'callAppBeforeCallback' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'callAppBeforeCallback',
        TMode
      > & {
        abi?: never
        functionName?: 'callAppBeforeCallback'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'callAppBeforeCallback',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'callAppBeforeCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"ctxUseCredit"`.
 */
export function useISuperfluidCtxUseCredit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'ctxUseCredit'
        >['request']['abi'],
        'ctxUseCredit',
        TMode
      > & { functionName?: 'ctxUseCredit' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'ctxUseCredit', TMode> & {
        abi?: never
        functionName?: 'ctxUseCredit'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'ctxUseCredit', TMode>({
    abi: iSuperfluidABI,
    functionName: 'ctxUseCredit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"forwardBatchCall"`.
 */
export function useISuperfluidForwardBatchCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'forwardBatchCall'
        >['request']['abi'],
        'forwardBatchCall',
        TMode
      > & { functionName?: 'forwardBatchCall' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'forwardBatchCall',
        TMode
      > & {
        abi?: never
        functionName?: 'forwardBatchCall'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'forwardBatchCall', TMode>({
    abi: iSuperfluidABI,
    functionName: 'forwardBatchCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"jailApp"`.
 */
export function useISuperfluidJailApp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'jailApp'
        >['request']['abi'],
        'jailApp',
        TMode
      > & { functionName?: 'jailApp' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'jailApp', TMode> & {
        abi?: never
        functionName?: 'jailApp'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'jailApp', TMode>({
    abi: iSuperfluidABI,
    functionName: 'jailApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function useISuperfluidRegisterAgreementClass<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'registerAgreementClass'
        >['request']['abi'],
        'registerAgreementClass',
        TMode
      > & { functionName?: 'registerAgreementClass' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'registerAgreementClass',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAgreementClass'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'registerAgreementClass',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerApp"`.
 */
export function useISuperfluidRegisterApp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'registerApp'
        >['request']['abi'],
        'registerApp',
        TMode
      > & { functionName?: 'registerApp' }
    : UseContractWriteConfig<typeof iSuperfluidABI, 'registerApp', TMode> & {
        abi?: never
        functionName?: 'registerApp'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'registerApp', TMode>({
    abi: iSuperfluidABI,
    functionName: 'registerApp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAppByFactory"`.
 */
export function useISuperfluidRegisterAppByFactory<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'registerAppByFactory'
        >['request']['abi'],
        'registerAppByFactory',
        TMode
      > & { functionName?: 'registerAppByFactory' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'registerAppByFactory',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAppByFactory'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'registerAppByFactory', TMode>(
    {
      abi: iSuperfluidABI,
      functionName: 'registerAppByFactory',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAppWithKey"`.
 */
export function useISuperfluidRegisterAppWithKey<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'registerAppWithKey'
        >['request']['abi'],
        'registerAppWithKey',
        TMode
      > & { functionName?: 'registerAppWithKey' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'registerAppWithKey',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAppWithKey'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'registerAppWithKey', TMode>({
    abi: iSuperfluidABI,
    functionName: 'registerAppWithKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function useISuperfluidReplaceGovernance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'replaceGovernance'
        >['request']['abi'],
        'replaceGovernance',
        TMode
      > & { functionName?: 'replaceGovernance' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'replaceGovernance',
        TMode
      > & {
        abi?: never
        functionName?: 'replaceGovernance'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'replaceGovernance', TMode>({
    abi: iSuperfluidABI,
    functionName: 'replaceGovernance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateAgreementClass"`.
 */
export function useISuperfluidUpdateAgreementClass<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'updateAgreementClass'
        >['request']['abi'],
        'updateAgreementClass',
        TMode
      > & { functionName?: 'updateAgreementClass' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'updateAgreementClass',
        TMode
      > & {
        abi?: never
        functionName?: 'updateAgreementClass'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidABI, 'updateAgreementClass', TMode>(
    {
      abi: iSuperfluidABI,
      functionName: 'updateAgreementClass',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateSuperTokenFactory"`.
 */
export function useISuperfluidUpdateSuperTokenFactory<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'updateSuperTokenFactory'
        >['request']['abi'],
        'updateSuperTokenFactory',
        TMode
      > & { functionName?: 'updateSuperTokenFactory' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'updateSuperTokenFactory',
        TMode
      > & {
        abi?: never
        functionName?: 'updateSuperTokenFactory'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'updateSuperTokenFactory',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'updateSuperTokenFactory',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateSuperTokenLogic"`.
 */
export function useISuperfluidUpdateSuperTokenLogic<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidABI,
          'updateSuperTokenLogic'
        >['request']['abi'],
        'updateSuperTokenLogic',
        TMode
      > & { functionName?: 'updateSuperTokenLogic' }
    : UseContractWriteConfig<
        typeof iSuperfluidABI,
        'updateSuperTokenLogic',
        TMode
      > & {
        abi?: never
        functionName?: 'updateSuperTokenLogic'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidABI,
    'updateSuperTokenLogic',
    TMode
  >({
    abi: iSuperfluidABI,
    functionName: 'updateSuperTokenLogic',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__.
 */
export function usePrepareISuperfluidWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"allowCompositeApp"`.
 */
export function usePrepareISuperfluidAllowCompositeApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'allowCompositeApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'allowCompositeApp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'allowCompositeApp'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"appCallbackPop"`.
 */
export function usePrepareISuperfluidAppCallbackPop(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'appCallbackPop'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'appCallbackPop',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'appCallbackPop'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"appCallbackPush"`.
 */
export function usePrepareISuperfluidAppCallbackPush(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'appCallbackPush'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'appCallbackPush',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'appCallbackPush'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"batchCall"`.
 */
export function usePrepareISuperfluidBatchCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'batchCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'batchCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'batchCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAgreement"`.
 */
export function usePrepareISuperfluidCallAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'callAgreement'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'callAgreement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAgreementWithContext"`.
 */
export function usePrepareISuperfluidCallAgreementWithContext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'callAgreementWithContext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAgreementWithContext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'callAgreementWithContext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppAction"`.
 */
export function usePrepareISuperfluidCallAppAction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'callAppAction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAppAction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'callAppAction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppActionWithContext"`.
 */
export function usePrepareISuperfluidCallAppActionWithContext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'callAppActionWithContext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAppActionWithContext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'callAppActionWithContext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppAfterCallback"`.
 */
export function usePrepareISuperfluidCallAppAfterCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'callAppAfterCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAppAfterCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'callAppAfterCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"callAppBeforeCallback"`.
 */
export function usePrepareISuperfluidCallAppBeforeCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'callAppBeforeCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'callAppBeforeCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'callAppBeforeCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"ctxUseCredit"`.
 */
export function usePrepareISuperfluidCtxUseCredit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'ctxUseCredit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'ctxUseCredit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'ctxUseCredit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"forwardBatchCall"`.
 */
export function usePrepareISuperfluidForwardBatchCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'forwardBatchCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'forwardBatchCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'forwardBatchCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"jailApp"`.
 */
export function usePrepareISuperfluidJailApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'jailApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'jailApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'jailApp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function usePrepareISuperfluidRegisterAgreementClass(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'registerAgreementClass'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'registerAgreementClass'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerApp"`.
 */
export function usePrepareISuperfluidRegisterApp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'registerApp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'registerApp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'registerApp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAppByFactory"`.
 */
export function usePrepareISuperfluidRegisterAppByFactory(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'registerAppByFactory'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'registerAppByFactory',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'registerAppByFactory'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"registerAppWithKey"`.
 */
export function usePrepareISuperfluidRegisterAppWithKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'registerAppWithKey'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'registerAppWithKey',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'registerAppWithKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function usePrepareISuperfluidReplaceGovernance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidABI, 'replaceGovernance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'replaceGovernance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'replaceGovernance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateAgreementClass"`.
 */
export function usePrepareISuperfluidUpdateAgreementClass(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'updateAgreementClass'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'updateAgreementClass',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'updateAgreementClass'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateSuperTokenFactory"`.
 */
export function usePrepareISuperfluidUpdateSuperTokenFactory(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'updateSuperTokenFactory'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'updateSuperTokenFactory',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'updateSuperTokenFactory'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidABI}__ and `functionName` set to `"updateSuperTokenLogic"`.
 */
export function usePrepareISuperfluidUpdateSuperTokenLogic(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidABI,
      'updateSuperTokenLogic'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidABI,
    functionName: 'updateSuperTokenLogic',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidABI,
    'updateSuperTokenLogic'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__.
 */
export function useISuperfluidEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"AgreementClassRegistered"`.
 */
export function useISuperfluidAgreementClassRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'AgreementClassRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'AgreementClassRegistered',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidABI,
    'AgreementClassRegistered'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"AgreementClassUpdated"`.
 */
export function useISuperfluidAgreementClassUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'AgreementClassUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'AgreementClassUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, 'AgreementClassUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"AppRegistered"`.
 */
export function useISuperfluidAppRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'AppRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'AppRegistered',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, 'AppRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"GovernanceReplaced"`.
 */
export function useISuperfluidGovernanceReplacedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'GovernanceReplaced'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'GovernanceReplaced',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, 'GovernanceReplaced'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"Jail"`.
 */
export function useISuperfluidJailEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'Jail'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'Jail',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, 'Jail'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"SuperTokenFactoryUpdated"`.
 */
export function useISuperfluidSuperTokenFactoryUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'SuperTokenFactoryUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'SuperTokenFactoryUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidABI,
    'SuperTokenFactoryUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidABI}__ and `eventName` set to `"SuperTokenLogicUpdated"`.
 */
export function useISuperfluidSuperTokenLogicUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidABI, 'SuperTokenLogicUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidABI,
    eventName: 'SuperTokenLogicUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidABI, 'SuperTokenLogicUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__.
 */
export function useISuperfluidGovernanceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSuperfluidGovernanceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidGovernanceABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidGovernanceABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidGovernanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"getConfigAsAddress"`.
 */
export function useISuperfluidGovernanceGetConfigAsAddress<
  TFunctionName extends 'getConfigAsAddress',
  TSelectData = ReadContractResult<
    typeof iSuperfluidGovernanceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidGovernanceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidGovernanceABI,
    functionName: 'getConfigAsAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidGovernanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"getConfigAsUint256"`.
 */
export function useISuperfluidGovernanceGetConfigAsUint256<
  TFunctionName extends 'getConfigAsUint256',
  TSelectData = ReadContractResult<
    typeof iSuperfluidGovernanceABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidGovernanceABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidGovernanceABI,
    functionName: 'getConfigAsUint256',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidGovernanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__.
 */
export function useISuperfluidGovernanceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    TFunctionName,
    TMode
  >({ abi: iSuperfluidGovernanceABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"batchUpdateSuperTokenLogic"`.
 */
export function useISuperfluidGovernanceBatchUpdateSuperTokenLogic<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'batchUpdateSuperTokenLogic'
        >['request']['abi'],
        'batchUpdateSuperTokenLogic',
        TMode
      > & { functionName?: 'batchUpdateSuperTokenLogic' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'batchUpdateSuperTokenLogic',
        TMode
      > & {
        abi?: never
        functionName?: 'batchUpdateSuperTokenLogic'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    'batchUpdateSuperTokenLogic',
    TMode
  >({
    abi: iSuperfluidGovernanceABI,
    functionName: 'batchUpdateSuperTokenLogic',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"clearConfig"`.
 */
export function useISuperfluidGovernanceClearConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'clearConfig'
        >['request']['abi'],
        'clearConfig',
        TMode
      > & { functionName?: 'clearConfig' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'clearConfig',
        TMode
      > & {
        abi?: never
        functionName?: 'clearConfig'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    'clearConfig',
    TMode
  >({
    abi: iSuperfluidGovernanceABI,
    functionName: 'clearConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function useISuperfluidGovernanceRegisterAgreementClass<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'registerAgreementClass'
        >['request']['abi'],
        'registerAgreementClass',
        TMode
      > & { functionName?: 'registerAgreementClass' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'registerAgreementClass',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAgreementClass'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    'registerAgreementClass',
    TMode
  >({
    abi: iSuperfluidGovernanceABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function useISuperfluidGovernanceReplaceGovernance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'replaceGovernance'
        >['request']['abi'],
        'replaceGovernance',
        TMode
      > & { functionName?: 'replaceGovernance' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'replaceGovernance',
        TMode
      > & {
        abi?: never
        functionName?: 'replaceGovernance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    'replaceGovernance',
    TMode
  >({
    abi: iSuperfluidGovernanceABI,
    functionName: 'replaceGovernance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"setConfig"`.
 */
export function useISuperfluidGovernanceSetConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'setConfig'
        >['request']['abi'],
        'setConfig',
        TMode
      > & { functionName?: 'setConfig' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'setConfig',
        TMode
      > & {
        abi?: never
        functionName?: 'setConfig'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidGovernanceABI, 'setConfig', TMode>({
    abi: iSuperfluidGovernanceABI,
    functionName: 'setConfig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"updateContracts"`.
 */
export function useISuperfluidGovernanceUpdateContracts<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidGovernanceABI,
          'updateContracts'
        >['request']['abi'],
        'updateContracts',
        TMode
      > & { functionName?: 'updateContracts' }
    : UseContractWriteConfig<
        typeof iSuperfluidGovernanceABI,
        'updateContracts',
        TMode
      > & {
        abi?: never
        functionName?: 'updateContracts'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidGovernanceABI,
    'updateContracts',
    TMode
  >({
    abi: iSuperfluidGovernanceABI,
    functionName: 'updateContracts',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__.
 */
export function usePrepareISuperfluidGovernanceWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"batchUpdateSuperTokenLogic"`.
 */
export function usePrepareISuperfluidGovernanceBatchUpdateSuperTokenLogic(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      'batchUpdateSuperTokenLogic'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'batchUpdateSuperTokenLogic',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'batchUpdateSuperTokenLogic'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"clearConfig"`.
 */
export function usePrepareISuperfluidGovernanceClearConfig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      'clearConfig'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'clearConfig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'clearConfig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"registerAgreementClass"`.
 */
export function usePrepareISuperfluidGovernanceRegisterAgreementClass(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      'registerAgreementClass'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'registerAgreementClass',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'registerAgreementClass'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"replaceGovernance"`.
 */
export function usePrepareISuperfluidGovernanceReplaceGovernance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      'replaceGovernance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'replaceGovernance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'replaceGovernance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"setConfig"`.
 */
export function usePrepareISuperfluidGovernanceSetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidGovernanceABI, 'setConfig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'setConfig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'setConfig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidGovernanceABI}__ and `functionName` set to `"updateContracts"`.
 */
export function usePrepareISuperfluidGovernanceUpdateContracts(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidGovernanceABI,
      'updateContracts'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidGovernanceABI,
    functionName: 'updateContracts',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidGovernanceABI,
    'updateContracts'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__.
 */
export function useISuperfluidTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"getAccountActiveAgreements"`.
 */
export function useISuperfluidTokenGetAccountActiveAgreements<
  TFunctionName extends 'getAccountActiveAgreements',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'getAccountActiveAgreements',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"getAgreementData"`.
 */
export function useISuperfluidTokenGetAgreementData<
  TFunctionName extends 'getAgreementData',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'getAgreementData',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"getAgreementStateSlot"`.
 */
export function useISuperfluidTokenGetAgreementStateSlot<
  TFunctionName extends 'getAgreementStateSlot',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'getAgreementStateSlot',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"getHost"`.
 */
export function useISuperfluidTokenGetHost<
  TFunctionName extends 'getHost',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'getHost',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"isAccountCritical"`.
 */
export function useISuperfluidTokenIsAccountCritical<
  TFunctionName extends 'isAccountCritical',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'isAccountCritical',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"isAccountCriticalNow"`.
 */
export function useISuperfluidTokenIsAccountCriticalNow<
  TFunctionName extends 'isAccountCriticalNow',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'isAccountCriticalNow',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"isAccountSolvent"`.
 */
export function useISuperfluidTokenIsAccountSolvent<
  TFunctionName extends 'isAccountSolvent',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'isAccountSolvent',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"isAccountSolventNow"`.
 */
export function useISuperfluidTokenIsAccountSolventNow<
  TFunctionName extends 'isAccountSolventNow',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'isAccountSolventNow',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useISuperfluidTokenRealtimeBalanceOf<
  TFunctionName extends 'realtimeBalanceOf',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"realtimeBalanceOfNow"`.
 */
export function useISuperfluidTokenRealtimeBalanceOfNow<
  TFunctionName extends 'realtimeBalanceOfNow',
  TSelectData = ReadContractResult<typeof iSuperfluidTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperfluidTokenABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperfluidTokenABI,
    functionName: 'realtimeBalanceOfNow',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperfluidTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__.
 */
export function useISuperfluidTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidTokenABI, TFunctionName, TMode>({
    abi: iSuperfluidTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function useISuperfluidTokenCreateAgreement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'createAgreement'
        >['request']['abi'],
        'createAgreement',
        TMode
      > & { functionName?: 'createAgreement' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'createAgreement',
        TMode
      > & {
        abi?: never
        functionName?: 'createAgreement'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidTokenABI, 'createAgreement', TMode>(
    {
      abi: iSuperfluidTokenABI,
      functionName: 'createAgreement',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function useISuperfluidTokenMakeLiquidationPayoutsV2<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'makeLiquidationPayoutsV2'
        >['request']['abi'],
        'makeLiquidationPayoutsV2',
        TMode
      > & { functionName?: 'makeLiquidationPayoutsV2' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'makeLiquidationPayoutsV2',
        TMode
      > & {
        abi?: never
        functionName?: 'makeLiquidationPayoutsV2'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidTokenABI,
    'makeLiquidationPayoutsV2',
    TMode
  >({
    abi: iSuperfluidTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function useISuperfluidTokenSettleBalance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'settleBalance'
        >['request']['abi'],
        'settleBalance',
        TMode
      > & { functionName?: 'settleBalance' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'settleBalance',
        TMode
      > & {
        abi?: never
        functionName?: 'settleBalance'
      } = {} as any,
) {
  return useContractWrite<typeof iSuperfluidTokenABI, 'settleBalance', TMode>({
    abi: iSuperfluidTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function useISuperfluidTokenTerminateAgreement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'terminateAgreement'
        >['request']['abi'],
        'terminateAgreement',
        TMode
      > & { functionName?: 'terminateAgreement' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'terminateAgreement',
        TMode
      > & {
        abi?: never
        functionName?: 'terminateAgreement'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidTokenABI,
    'terminateAgreement',
    TMode
  >({
    abi: iSuperfluidTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function useISuperfluidTokenUpdateAgreementData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'updateAgreementData'
        >['request']['abi'],
        'updateAgreementData',
        TMode
      > & { functionName?: 'updateAgreementData' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'updateAgreementData',
        TMode
      > & {
        abi?: never
        functionName?: 'updateAgreementData'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidTokenABI,
    'updateAgreementData',
    TMode
  >({
    abi: iSuperfluidTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function useISuperfluidTokenUpdateAgreementStateSlot<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSuperfluidTokenABI,
          'updateAgreementStateSlot'
        >['request']['abi'],
        'updateAgreementStateSlot',
        TMode
      > & { functionName?: 'updateAgreementStateSlot' }
    : UseContractWriteConfig<
        typeof iSuperfluidTokenABI,
        'updateAgreementStateSlot',
        TMode
      > & {
        abi?: never
        functionName?: 'updateAgreementStateSlot'
      } = {} as any,
) {
  return useContractWrite<
    typeof iSuperfluidTokenABI,
    'updateAgreementStateSlot',
    TMode
  >({
    abi: iSuperfluidTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__.
 */
export function usePrepareISuperfluidTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSuperfluidTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"createAgreement"`.
 */
export function usePrepareISuperfluidTokenCreateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidTokenABI,
      'createAgreement'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'createAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'createAgreement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"makeLiquidationPayoutsV2"`.
 */
export function usePrepareISuperfluidTokenMakeLiquidationPayoutsV2(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidTokenABI,
      'makeLiquidationPayoutsV2'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'makeLiquidationPayoutsV2',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'makeLiquidationPayoutsV2'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"settleBalance"`.
 */
export function usePrepareISuperfluidTokenSettleBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSuperfluidTokenABI, 'settleBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'settleBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'settleBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"terminateAgreement"`.
 */
export function usePrepareISuperfluidTokenTerminateAgreement(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidTokenABI,
      'terminateAgreement'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'terminateAgreement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'terminateAgreement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"updateAgreementData"`.
 */
export function usePrepareISuperfluidTokenUpdateAgreementData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidTokenABI,
      'updateAgreementData'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'updateAgreementData',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'updateAgreementData'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `functionName` set to `"updateAgreementStateSlot"`.
 */
export function usePrepareISuperfluidTokenUpdateAgreementStateSlot(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSuperfluidTokenABI,
      'updateAgreementStateSlot'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSuperfluidTokenABI,
    functionName: 'updateAgreementStateSlot',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSuperfluidTokenABI,
    'updateAgreementStateSlot'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__.
 */
export function useISuperfluidTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementCreated"`.
 */
export function useISuperfluidTokenAgreementCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementCreated',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementLiquidated"`.
 */
export function useISuperfluidTokenAgreementLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementLiquidated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementLiquidated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidTokenABI,
    'AgreementLiquidated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementLiquidatedBy"`.
 */
export function useISuperfluidTokenAgreementLiquidatedByEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementLiquidatedBy'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementLiquidatedBy',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidTokenABI,
    'AgreementLiquidatedBy'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementLiquidatedV2"`.
 */
export function useISuperfluidTokenAgreementLiquidatedV2Event(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementLiquidatedV2'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementLiquidatedV2',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidTokenABI,
    'AgreementLiquidatedV2'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementStateUpdated"`.
 */
export function useISuperfluidTokenAgreementStateUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementStateUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementStateUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidTokenABI,
    'AgreementStateUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementTerminated"`.
 */
export function useISuperfluidTokenAgreementTerminatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementTerminated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementTerminated',
    ...config,
  } as UseContractEventConfig<
    typeof iSuperfluidTokenABI,
    'AgreementTerminated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"AgreementUpdated"`.
 */
export function useISuperfluidTokenAgreementUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'AgreementUpdated',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidTokenABI, 'AgreementUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSuperfluidTokenABI}__ and `eventName` set to `"Bailout"`.
 */
export function useISuperfluidTokenBailoutEvent(
  config: Omit<
    UseContractEventConfig<typeof iSuperfluidTokenABI, 'Bailout'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSuperfluidTokenABI,
    eventName: 'Bailout',
    ...config,
  } as UseContractEventConfig<typeof iSuperfluidTokenABI, 'Bailout'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAgreementABI}__.
 */
export function useISuperAgreementRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSuperAgreementABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAgreementABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSuperAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAgreementABI}__ and `functionName` set to `"agreementType"`.
 */
export function useISuperAgreementAgreementType<
  TFunctionName extends 'agreementType',
  TSelectData = ReadContractResult<typeof iSuperAgreementABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAgreementABI,
    functionName: 'agreementType',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSuperAgreementABI}__ and `functionName` set to `"realtimeBalanceOf"`.
 */
export function useISuperAgreementRealtimeBalanceOf<
  TFunctionName extends 'realtimeBalanceOf',
  TSelectData = ReadContractResult<typeof iSuperAgreementABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSuperAgreementABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSuperAgreementABI,
    functionName: 'realtimeBalanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof iSuperAgreementABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenInfoABI}__.
 */
export function useTokenInfoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenInfoABI,
    ...config,
  } as UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenInfoABI}__ and `functionName` set to `"decimals"`.
 */
export function useTokenInfoDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof tokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenInfoABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenInfoABI}__ and `functionName` set to `"name"`.
 */
export function useTokenInfoName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof tokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenInfoABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenInfoABI}__ and `functionName` set to `"symbol"`.
 */
export function useTokenInfoSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof tokenInfoABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tokenInfoABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof tokenInfoABI, TFunctionName, TSelectData>)
}
